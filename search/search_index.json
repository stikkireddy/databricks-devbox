{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Databricks DevBox","text":"<p>Welcome to Databricks DevBox - a powerful web-based development environment management platform that brings VS Code to your browser, powered by code-server and optimized for Databricks workflows.</p>"},{"location":"#what-is-databricks-devbox","title":"What is Databricks DevBox?","text":"<p>Databricks DevBox is a Go-based server application that manages multiple code-server instances, allowing you to create isolated development environments with custom extensions, configurations, and workspace setups. It's designed to be deployed as a Databricks Lakehouse App, providing developers with instant access to cloud-based IDEs directly within their Databricks workspace.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#instant-development-environments","title":"Instant Development Environments","text":"<p>Create and launch isolated code-server instances in seconds with pre-configured extension groups for Python, Jupyter, Databricks, and more.</p>"},{"location":"#ai-powered-coding-assistants","title":"AI-Powered Coding Assistants","text":"<p>Built-in support for multiple vibe coding tools:</p> <ul> <li>Claude Code: Anthropic's AI coding assistant</li> <li>Claude Code Router (CCR): Proxy for Databricks-hosted AI models</li> <li>OpenAI Codex: GitHub Copilot-style code completion</li> <li>Google Gemini: Google's generative AI assistant</li> </ul>"},{"location":"#workspace-templates","title":"Workspace Templates","text":"<p>Quick-start templates for common scenarios:</p> <ul> <li>Databricks Workshops</li> <li>Python Data Science projects</li> <li>Machine Learning experiments</li> <li>Custom GitHub repository cloning</li> </ul>"},{"location":"#real-time-monitoring","title":"Real-time Monitoring","text":"<p>Track server health, CPU usage, memory consumption, and uptime for all running instances through a modern React-based UI.</p>"},{"location":"#enterprise-security","title":"Enterprise Security","text":"<ul> <li>Databricks SDK authentication</li> <li>Auto-generated tokens with configurable expiry</li> <li>Unity Catalog integration</li> <li>Isolated workspaces per instance</li> </ul>"},{"location":"#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TB\n    User[User Browser] --&gt; WebUI[React Web UI]\n    WebUI --&gt; GoServer[Go Server :8000]\n    GoServer --&gt; CS1[code-server :8010]\n    GoServer --&gt; CS2[code-server :8011]\n    GoServer --&gt; CS3[code-server :...]\n    CS1 --&gt; WS1[Workspace 1]\n    CS2 --&gt; WS2[Workspace 2]\n    CS3 --&gt; WS3[Workspace N]\n    GoServer --&gt; DB[(servers.json)]\n    GoServer --&gt; Logs[Log Manager]</code></pre> <p>The system consists of three main components:</p> <ol> <li>Go Server (<code>databricks_devbox_go/</code>): Core server managing code-server processes, routing, and lifecycle</li> <li>Python Wrapper (<code>app/</code>): Handles Databricks App deployment, token management, and vibe coding tools setup</li> <li>Web UI (<code>web_ui/</code>): React-based interface for managing servers</li> </ol>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#as-a-databricks-app","title":"As a Databricks App","text":"<ol> <li>Copy the <code>app/</code> folder to your Databricks workspace</li> <li>Create a Databricks App from the workspace</li> <li>The app automatically downloads required binaries (Go server, code-server, Databricks CLI)</li> <li>Access the UI through your Databricks App URL</li> </ol> <p>Detailed Installation Guide \u2192</p>"},{"location":"#local-development","title":"Local Development","text":"<pre><code># Clone the repository\ngit clone https://github.com/stikkireddy/databricks-devbox.git\ncd databricks-devbox\n\n# Install dependencies\nmake install\n\n# Run the server\nmake run\n\n# Access at http://localhost:8000\n</code></pre> <p>Local Setup Guide \u2192</p>"},{"location":"#use-cases","title":"Use Cases","text":""},{"location":"#1-training-workshops","title":"1. Training &amp; Workshops","text":"<p>Deploy pre-configured development environments for Databricks training sessions with all required extensions and sample code.</p>"},{"location":"#2-remote-development","title":"2. Remote Development","text":"<p>Provide team members with consistent, cloud-based IDEs that work from any device with a browser.</p>"},{"location":"#3-ai-assisted-coding","title":"3. AI-Assisted Coding","text":"<p>Leverage multiple AI coding assistants (Claude Code, Codex, Gemini) within your development environment.</p>"},{"location":"#4-vs-code-like-development","title":"4. VS Code-Like Development","text":"<p>Full-featured IDE environment with extensions, terminal, debugging, and Git integration - not limited to notebooks.</p>"},{"location":"#what-makes-it-different","title":"What Makes It Different?","text":""},{"location":"#not-vs-code-desktop","title":"Not VS Code Desktop","text":"<p>Databricks DevBox uses code-server, which is an open-source fork of VS Code that runs in the browser. This means:</p> <ul> <li>Web-based: Access from any device</li> <li>No installation: Works immediately in browser</li> <li>Remote execution: Code runs on server</li> <li>Different marketplace: Uses Open VSX instead of Microsoft's marketplace</li> </ul> <p>Learn more about code-server \u2192</p>"},{"location":"#multi-instance-management","title":"Multi-Instance Management","text":"<p>Unlike running a single code-server instance, Databricks DevBox:</p> <ul> <li>Manages multiple isolated instances</li> <li>Provides dynamic port allocation</li> <li>Includes health monitoring and auto-restart</li> <li>Offers a web UI for lifecycle management</li> </ul>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li> <p> Installation</p> <p>Deploy to Databricks or run locally</p> </li> <li> <p> Configuration</p> <p>Customize extension groups and settings</p> </li> <li> <p> Coding Assistants</p> <p>Set up AI-powered development tools</p> </li> <li> <p> API Reference</p> <p>Integrate with REST API</p> </li> </ul>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>GitHub: stikkireddy/databricks-devbox</li> <li>Issues: Report bugs or request features</li> <li>Contributions: Pull requests welcome!</li> </ul>"},{"location":"#license","title":"License","text":"<p>MIT License - see LICENSE file for details.</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>Complete REST API documentation for Databricks DevBox.</p>"},{"location":"api-reference/#base-url","title":"Base URL","text":"<pre><code>http://localhost:8000\n</code></pre> <p>Replace <code>localhost:8000</code> with your actual server address.</p>"},{"location":"api-reference/#health-check","title":"Health Check","text":""},{"location":"api-reference/#get-server-health","title":"Get Server Health","text":"<pre><code>GET /health\n</code></pre> <p>Response:</p> <pre><code>{\n  \"status\": \"healthy\",\n  \"service\": \"Databricks Devbox API\"\n}\n</code></pre>"},{"location":"api-reference/#configuration","title":"Configuration","text":""},{"location":"api-reference/#get-configuration","title":"Get Configuration","text":"<pre><code>GET /config\n</code></pre> <p>Response:</p> <pre><code>{\n  \"status\": \"success\",\n  \"data\": {\n    \"extension_groups\": {...},\n    \"server\": {...},\n    \"ui\": {...},\n    \"packaged_assets\": {...}\n  }\n}\n</code></pre>"},{"location":"api-reference/#get-templates","title":"Get Templates","text":"<pre><code>GET /templates\n</code></pre> <p>Response:</p> <pre><code>{\n  \"status\": \"success\",\n  \"data\": {\n    \"tabs\": [\n      {\n        \"name\": \"Workshops\",\n        \"items\": [...]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"api-reference/#server-management","title":"Server Management","text":""},{"location":"api-reference/#list-servers","title":"List Servers","text":"<pre><code>GET /servers\n</code></pre> <p>Response:</p> <pre><code>[\n  {\n    \"id\": \"uuid\",\n    \"name\": \"my-server\",\n    \"port\": 8010,\n    \"workspace_path\": \"/path/to/workspace\",\n    \"extensions\": [\"ms-python.python\"],\n    \"status\": \"running\",\n    \"pid\": 12345,\n    \"start_time\": \"2025-01-15T10:00:00Z\",\n    \"uptime\": 3600.5,\n    \"cpu_percent\": 15.2,\n    \"memory_mb\": 512.3\n  }\n]\n</code></pre>"},{"location":"api-reference/#create-server","title":"Create Server","text":"<pre><code>POST /servers\nContent-Type: application/json\n\n{\n  \"name\": \"my-server\",\n  \"extensions\": [\"ms-python.python\", \"ms-toolsai.jupyter\"]\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"id\": \"uuid\",\n  \"name\": \"my-server\",\n  \"port\": 8010,\n  \"workspace_path\": \"/path/to/workspace\",\n  \"extensions\": [\"ms-python.python\", \"ms-toolsai.jupyter\"],\n  \"status\": \"stopped\",\n  \"pid\": null\n}\n</code></pre> <p>Status: <code>201 Created</code></p>"},{"location":"api-reference/#create-server-with-workspace","title":"Create Server with Workspace","text":"<pre><code>POST /servers/create-with-workspace\nContent-Type: multipart/form-data\n\nname=my-server\nextensions=[\"ms-python.python\"]\ngithub_url=https://github.com/org/repo.git\n# OR\nzip_file=&lt;binary&gt;\n</code></pre> <p>Response:</p> <pre><code>{\n  \"id\": \"uuid\",\n  \"name\": \"my-server\",\n  \"port\": 8010,\n  \"workspace_path\": \"/path/to/workspace\",\n  \"status\": \"stopped\"\n}\n</code></pre> <p>Status: <code>201 Created</code></p>"},{"location":"api-reference/#create-from-template","title":"Create from Template","text":"<pre><code>POST /servers/create-from-template\nContent-Type: application/json\n\n{\n  \"name\": \"workshop-server\",\n  \"template_id\": \"Databricks Workshop\",\n  \"tab_name\": \"Workshops\"\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"id\": \"uuid\",\n  \"name\": \"workshop-server\",\n  \"port\": 8010,\n  \"status\": \"stopped\"\n}\n</code></pre> <p>Status: <code>201 Created</code></p>"},{"location":"api-reference/#start-server","title":"Start Server","text":"<pre><code>POST /servers/:id/start\n</code></pre> <p>Response:</p> <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Server started\",\n  \"data\": {\n    \"id\": \"uuid\",\n    \"status\": \"running\",\n    \"pid\": 12345\n  }\n}\n</code></pre>"},{"location":"api-reference/#stop-server","title":"Stop Server","text":"<pre><code>POST /servers/:id/stop\n</code></pre> <p>Response:</p> <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Server stopped\",\n  \"data\": {\n    \"id\": \"uuid\",\n    \"status\": \"stopped\",\n    \"pid\": null\n  }\n}\n</code></pre>"},{"location":"api-reference/#restart-server","title":"Restart Server","text":"<pre><code>POST /servers/:id/restart\n</code></pre> <p>Response:</p> <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Server restarted\",\n  \"data\": {\n    \"id\": \"uuid\",\n    \"status\": \"running\",\n    \"pid\": 12346\n  }\n}\n</code></pre>"},{"location":"api-reference/#delete-server","title":"Delete Server","text":"<pre><code>DELETE /servers/:id\n</code></pre> <p>Response:</p> <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Server deleted\"\n}\n</code></pre> <p>Status: <code>200 OK</code></p>"},{"location":"api-reference/#health-monitoring","title":"Health &amp; Monitoring","text":""},{"location":"api-reference/#get-server-health_1","title":"Get Server Health","text":"<pre><code>GET /servers/:id/health\n</code></pre> <p>Response:</p> <pre><code>{\n  \"status\": \"success\",\n  \"data\": {\n    \"status\": \"running\",\n    \"http_healthy\": true,\n    \"cpu_percent\": 15.2,\n    \"memory_mb\": 512.3,\n    \"uptime_seconds\": 3600.5,\n    \"process_exists\": true\n  }\n}\n</code></pre>"},{"location":"api-reference/#get-server-logs","title":"Get Server Logs","text":"<pre><code>GET /servers/:id/logs?lines=50\n</code></pre> <p>Query Parameters:</p> <ul> <li><code>lines</code> (optional): Number of lines to return (default: 50)</li> </ul> <p>Response:</p> <pre><code>{\n  \"status\": \"success\",\n  \"data\": {\n    \"logs\": [\n      \"[2025-01-15 10:00:00] INFO: Server started\",\n      \"[2025-01-15 10:00:01] INFO: Extensions loaded\"\n    ]\n  }\n}\n</code></pre>"},{"location":"api-reference/#refresh-server-status","title":"Refresh Server Status","text":"<pre><code>POST /servers/:id/refresh-status\n</code></pre> <p>Response:</p> <pre><code>{\n  \"status\": \"success\",\n  \"id\": \"uuid\",\n  \"name\": \"my-server\",\n  \"port\": 8010,\n  \"old_status\": \"running\",\n  \"new_status\": \"running\",\n  \"pid_status\": \"PID 12345 exists\",\n  \"healthz_status\": \"Health endpoint responding on port 8010\",\n  \"updated\": false\n}\n</code></pre>"},{"location":"api-reference/#refresh-all-servers","title":"Refresh All Servers","text":"<pre><code>POST /servers/refresh-all\n</code></pre> <p>Response:</p> <pre><code>{\n  \"status\": \"success\",\n  \"total_servers\": 5,\n  \"updated\": 2,\n  \"message\": \"Updated 2 out of 5 servers\",\n  \"servers\": [...]\n}\n</code></pre>"},{"location":"api-reference/#websocket-api","title":"WebSocket API","text":""},{"location":"api-reference/#log-streaming","title":"Log Streaming","text":"<p>Connect to WebSocket for real-time log streaming.</p> <p>Endpoint:</p> <pre><code>ws://localhost:8000/ws/logs\n</code></pre> <p>Or for specific server:</p> <pre><code>ws://localhost:8000/ws/logs/:serverId\n</code></pre> <p>Message Format:</p> <pre><code>{\n  \"type\": \"log\",\n  \"server_id\": \"uuid\",\n  \"server_name\": \"my-server\",\n  \"level\": \"INFO\",\n  \"source\": \"server\",\n  \"message\": \"Server started successfully\",\n  \"timestamp\": \"2025-01-15T10:00:00Z\"\n}\n</code></pre> <p>Example (JavaScript):</p> <pre><code>const ws = new WebSocket('ws://localhost:8000/ws/logs');\n\nws.onmessage = (event) =&gt; {\n  const log = JSON.parse(event.data);\n  console.log(`[${log.level}] ${log.message}`);\n};\n\nws.onopen = () =&gt; console.log('Connected');\nws.onerror = (error) =&gt; console.error('WebSocket error:', error);\n</code></pre>"},{"location":"api-reference/#proxy-endpoints","title":"Proxy Endpoints","text":""},{"location":"api-reference/#access-code-server","title":"Access code-server","text":"<pre><code>GET /vscode/:port/*path\n</code></pre> <p>Example:</p> <pre><code>http://localhost:8000/vscode/8010/\n</code></pre> <p>Forwards to code-server instance on port 8010.</p>"},{"location":"api-reference/#multi-step-server-creation","title":"Multi-Step Server Creation","text":"<p>For advanced scenarios, create servers in steps:</p>"},{"location":"api-reference/#1-create-metadata","title":"1. Create Metadata","text":"<pre><code>POST /servers/create-metadata\nContent-Type: application/json\n\n{\n  \"name\": \"my-server\"\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"id\": \"uuid\",\n  \"name\": \"my-server\",\n  \"port\": 8010,\n  \"workspace_path\": \"/path/to/workspace\",\n  \"extensions\": [],\n  \"status\": \"stopped\"\n}\n</code></pre>"},{"location":"api-reference/#2-install-extensions","title":"2. Install Extensions","text":"<pre><code>POST /servers/:id/install-extensions\nContent-Type: application/json\n\n{\n  \"extensions\": [\"ms-python.python\", \"ms-toolsai.jupyter\"]\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Extensions installed\",\n  \"data\": {...}\n}\n</code></pre>"},{"location":"api-reference/#3-install-single-extension","title":"3. Install Single Extension","text":"<pre><code>POST /servers/:id/install-extension\nContent-Type: application/json\n\n{\n  \"extension\": \"ms-python.python\"\n}\n</code></pre>"},{"location":"api-reference/#4-apply-group-settings","title":"4. Apply Group Settings","text":"<pre><code>POST /servers/:id/apply-group-settings\nContent-Type: application/json\n\n{\n  \"groupName\": \"python\"\n}\n</code></pre>"},{"location":"api-reference/#5-clone-workspace","title":"5. Clone Workspace","text":"<pre><code>POST /servers/:id/clone-workspace\nContent-Type: multipart/form-data\n\ngithub_url=https://github.com/org/repo.git\n# OR\nzip_file=&lt;binary&gt;\n</code></pre>"},{"location":"api-reference/#6-start-server","title":"6. Start Server","text":"<pre><code>POST /servers/:id/start\n</code></pre>"},{"location":"api-reference/#error-responses","title":"Error Responses","text":""},{"location":"api-reference/#400-bad-request","title":"400 Bad Request","text":"<pre><code>{\n  \"error\": \"Invalid request parameters\"\n}\n</code></pre>"},{"location":"api-reference/#404-not-found","title":"404 Not Found","text":"<pre><code>{\n  \"error\": \"Server not found: uuid\"\n}\n</code></pre>"},{"location":"api-reference/#500-internal-server-error","title":"500 Internal Server Error","text":"<pre><code>{\n  \"error\": \"Failed to start server: &lt;reason&gt;\"\n}\n</code></pre>"},{"location":"api-reference/#rate-limiting","title":"Rate Limiting","text":"<p>Currently, no rate limiting is enforced. This may change in future versions.</p>"},{"location":"api-reference/#authentication","title":"Authentication","text":"<ul> <li>Databricks App: Uses Databricks SSO (automatic)</li> <li>Local: No authentication (development only)</li> </ul>"},{"location":"api-reference/#cors","title":"CORS","text":"<p>CORS is enabled for all origins:</p> <pre><code>Access-Control-Allow-Origin: *\nAccess-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS\nAccess-Control-Allow-Headers: Content-Type, Authorization\n</code></pre>"},{"location":"api-reference/#example-usage","title":"Example Usage","text":""},{"location":"api-reference/#python","title":"Python","text":"<pre><code>import requests\n\nBASE_URL = \"http://localhost:8000\"\n\n# List servers\nresponse = requests.get(f\"{BASE_URL}/servers\")\nservers = response.json()\n\n# Create server\nresponse = requests.post(\n    f\"{BASE_URL}/servers\",\n    json={\"name\": \"my-server\", \"extensions\": [\"ms-python.python\"]}\n)\nserver = response.json()\n\n# Start server\nserver_id = server[\"id\"]\nrequests.post(f\"{BASE_URL}/servers/{server_id}/start\")\n\n# Open in browser\nprint(f\"http://localhost:8000/vscode/{server['port']}/\")\n</code></pre>"},{"location":"api-reference/#javascript","title":"JavaScript","text":"<pre><code>const BASE_URL = 'http://localhost:8000';\n\n// List servers\nconst response = await fetch(`${BASE_URL}/servers`);\nconst servers = await response.json();\n\n// Create server\nconst createResponse = await fetch(`${BASE_URL}/servers`, {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    name: 'my-server',\n    extensions: ['ms-python.python']\n  })\n});\nconst server = await createResponse.json();\n\n// Start server\nawait fetch(`${BASE_URL}/servers/${server.id}/start`, {\n  method: 'POST'\n});\n\n// Open in browser\nwindow.open(`/vscode/${server.port}/`, '_blank');\n</code></pre>"},{"location":"api-reference/#curl","title":"cURL","text":"<pre><code># List servers\ncurl http://localhost:8000/servers\n\n# Create server\ncurl -X POST http://localhost:8000/servers \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\":\"my-server\",\"extensions\":[\"ms-python.python\"]}'\n\n# Start server\ncurl -X POST http://localhost:8000/servers/&lt;uuid&gt;/start\n\n# Get logs\ncurl http://localhost:8000/servers/&lt;uuid&gt;/logs?lines=100\n</code></pre>"},{"location":"api-reference/#next-steps","title":"Next Steps","text":"<ul> <li> <p>Architecture \u2192</p> <p>Understand the system</p> </li> <li> <p>Configuration \u2192</p> <p>Customize settings</p> </li> <li> <p>Installation \u2192</p> <p>Deploy to Databricks</p> </li> </ul>"},{"location":"authentication/","title":"Authentication","text":"<p>Databricks DevBox integrates with Databricks using the Databricks SDK for Python to handle authentication and token management for vibe coding assistants.</p>"},{"location":"authentication/#databricks-sdk-integration","title":"Databricks SDK Integration","text":"<p>The app uses <code>databricks.sdk.WorkspaceClient</code> for all Databricks interactions.</p>"},{"location":"authentication/#how-authentication-works","title":"How Authentication Works","text":"<p>When deployed as a Databricks App, the SDK automatically authenticates using:</p> <ul> <li>Service Principal credentials injected by Databricks</li> <li>Unity Catalog integration for token management</li> <li>Workspace context from <code>DATABRICKS_HOST</code> environment variable</li> </ul> <p>Credential Storage</p> <p>Authentication credentials are stored in the following locations:</p> <ul> <li>PAT Token: Stored in <code>~/.claude-code-router/config.json</code></li> <li>Service Principal Credentials: <code>client_id</code> and <code>client_secret</code> stored in <code>~/.databrickscfg</code></li> </ul> <p>Security Note: All users with access to the app share the same service principal. This is expected behavior since these credentials are already available in the app's environment variables. The shared service principal model is appropriate for multi-user Databricks App deployments.</p>"},{"location":"authentication/#environment-variables","title":"Environment Variables","text":"<p>The app relies on Databricks-provided environment variables:</p> <pre><code># Automatically set by Databricks App runtime\nDATABRICKS_HOST=&lt;workspace-url&gt;\nDATABRICKS_CLIENT_ID=&lt;client-id&gt;\nDATABRICKS_CLIENT_SECRET=&lt;client-secret&gt;\n</code></pre>"},{"location":"authentication/#token-management","title":"Token Management","text":"<p>Databricks DevBox uses Databricks Personal Access Tokens (PATs) to authenticate with Databricks-hosted AI models for vibe coding assistants.</p>"},{"location":"authentication/#token-generation","title":"Token Generation","text":"<p>Tokens are automatically generated using the Databricks SDK when the app starts.</p>"},{"location":"authentication/#how-it-works","title":"How It Works","text":"<pre><code># app/vibe_code.py:11\nfrom databricks.sdk import WorkspaceClient\n\ndef generate_spn_token(duration_seconds = 3600):\n    w = WorkspaceClient()  # Auto-authenticates in Databricks App context\n    token_expiry = int(os.environ.get(\"CLAUDE_CODE_TOKEN_EXPIRY_SECONDS\", duration_seconds))\n    token = w.tokens.create(\n        comment=f\"sdk-{time.time_ns()}\",\n        lifetime_seconds=token_expiry\n    ).token_value\n    return token\n</code></pre> <p>Process:</p> <ol> <li><code>WorkspaceClient()</code> authenticates using Databricks App credentials</li> <li>Creates a new token via Databricks API</li> <li>Token has configurable expiry (default: 3600 seconds = 1 hour)</li> <li>Token stored in CCR (Claude Code Router) configuration</li> </ol>"},{"location":"authentication/#configuration","title":"Configuration","text":"<p>Set token expiry via environment variable:</p> <pre><code># app.yaml\nenv:\n  - name: 'CLAUDE_CODE_TOKEN_EXPIRY_SECONDS'\n    value: '7200'  # 2 hours\n</code></pre>"},{"location":"authentication/#token-storage","title":"Token Storage","text":"<p>Tokens are stored in the CCR configuration file:</p> <pre><code>~/.claude-code-router/config.json\n</code></pre> <p>Configuration structure:</p> <pre><code>{\n  \"Providers\": [\n    {\n      \"name\": \"databricks\",\n      \"api_base_url\": \"https://&lt;workspace&gt;/serving-endpoints/databricks-claude-sonnet-4/invocations\",\n      \"api_key\": \"&lt;generated-token&gt;\",\n      \"models\": [\"databricks-claude-sonnet-4\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"authentication/#token-lifecycle","title":"Token Lifecycle","text":"<pre><code>sequenceDiagram\n    participant App as Python App\n    participant SDK as Databricks SDK\n    participant API as Databricks API\n    participant CCR as CCR Config\n\n    App-&gt;&gt;SDK: generate_spn_token()\n    SDK-&gt;&gt;API: tokens.create(lifetime_seconds)\n    API--&gt;&gt;SDK: token_value\n    SDK--&gt;&gt;App: token\n    App-&gt;&gt;CCR: Write config.json\n    Note over CCR: Token expires after lifetime_seconds\n    Note over App: On next restart, new token generated</code></pre>"},{"location":"authentication/#expiry-handling","title":"Expiry Handling","text":"<ul> <li>Automatic regeneration on app restart</li> <li>No refresh mechanism during runtime (tokens must last for app lifetime)</li> <li>Recommendation: Set expiry longer than expected app uptime</li> </ul>"},{"location":"authentication/#security","title":"Security","text":""},{"location":"authentication/#token-permissions","title":"Token Permissions","text":"<p>Generated tokens are created for the Service Principal associated with the app and will only have the permissions granted to that Service Principal:</p> <ul> <li>\u2705 Service Principal permissions only - tokens inherit the SPN's permissions</li> <li>\u2705 Model serving endpoint access (if granted to the SPN)</li> <li>\u274c No additional permissions beyond what the SPN has</li> <li>\u274c No user-level permissions</li> </ul>"},{"location":"authentication/#token-isolation","title":"Token Isolation","text":"<ul> <li>Each app deployment generates its own token</li> <li>Tokens are not shared between environments</li> <li>Tokens stored in app filesystem (not version controlled)</li> <li>Tokens are scoped to the Service Principal, not individual users</li> </ul>"},{"location":"authentication/#usage","title":"Usage","text":""},{"location":"authentication/#claude-code","title":"Claude Code","text":"<p>Token is automatically used by Claude Code via CCR proxy:</p> <pre><code># User runs\ncc\n\n# Behind the scenes:\n# 1. Claude Code connects to CCR proxy\n# 2. CCR forwards to Databricks endpoint with token\n# 3. Response routed back to Claude Code\n</code></pre>"},{"location":"authentication/#manual-token-access","title":"Manual Token Access","text":"<p>For debugging or custom scripts:</p> <pre><code># Read CCR config\ncat ~/.claude-code-router/config.json | jq '.Providers[0].api_key'\n\n# Use token with curl\nTOKEN=$(cat ~/.claude-code-router/config.json | jq -r '.Providers[0].api_key')\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n  https://&lt;workspace&gt;/serving-endpoints/databricks-claude-sonnet-4/invocations\n</code></pre>"},{"location":"authentication/#troubleshooting","title":"Troubleshooting","text":""},{"location":"authentication/#token-not-generated","title":"Token Not Generated","text":"<p>Symptoms:</p> <ul> <li>Claude Code fails to connect</li> <li>CCR config missing or empty</li> </ul> <p>Solutions:</p> <ol> <li>Check Unity Catalog is enabled</li> <li>Verify Databricks SDK authentication</li> <li>Check app logs for token generation errors</li> </ol> <pre><code># Check if token was generated\nls -la ~/.claude-code-router/config.json\ncat ~/.claude-code-router/config.json | jq '.Providers'\n</code></pre>"},{"location":"authentication/#token-expired","title":"Token Expired","text":"<p>Symptoms:</p> <ul> <li>Claude Code works initially, then fails</li> <li>HTTP 401 errors from Databricks endpoint</li> </ul> <p>Solutions:</p> <ol> <li>Restart the app (generates new token)</li> <li>Increase token expiry: <code>CLAUDE_CODE_TOKEN_EXPIRY_SECONDS=86400</code> (24 hours)</li> </ol>"},{"location":"authentication/#permission-denied","title":"Permission Denied","text":"<p>Symptoms:</p> <ul> <li>Token generation fails</li> <li>\"Insufficient permissions\" error</li> </ul> <p>Solutions:</p> <ol> <li>Ensure app has workspace access</li> <li>Check Unity Catalog permissions</li> <li>Verify Service Principal credentials</li> </ol>"},{"location":"authentication/#best-practices","title":"Best Practices","text":""},{"location":"authentication/#1-set-appropriate-expiry","title":"1. Set Appropriate Expiry","text":"<pre><code># For long-running apps (24 hours)\nenv:\n  - name: 'CLAUDE_CODE_TOKEN_EXPIRY_SECONDS'\n    value: '86400'\n\n# For short-lived demos (1 hour)\nenv:\n  - name: 'CLAUDE_CODE_TOKEN_EXPIRY_SECONDS'\n    value: '3600'\n</code></pre>"},{"location":"authentication/#2-monitor-token-usage","title":"2. Monitor Token Usage","text":"<p>Check CCR logs for token issues:</p> <pre><code>tail -f ~/.claude-code-router/plugin.log\n</code></pre>"},{"location":"authentication/#3-secure-token-storage","title":"3. Secure Token Storage","text":"<ul> <li>\u274c Never commit config.json to version control</li> <li>\u274c Never share tokens between users</li> <li>\u2705 Generate fresh tokens for each deployment</li> </ul>"},{"location":"authentication/#next-steps","title":"Next Steps","text":"<ul> <li> <p>Claude Code Router \u2192</p> <p>CCR configuration details</p> </li> <li> <p>Installation \u2192</p> <p>Deploy as Databricks App</p> </li> </ul>"},{"location":"architecture/","title":"Architecture Overview","text":"<p>Databricks DevBox is a three-tier architecture consisting of a Go-based server, a React web UI, and managed code-server instances.</p>"},{"location":"architecture/#system-architecture","title":"System Architecture","text":"<pre><code>graph TB\n    subgraph \"Client Browser\"\n        WebUI[React Web UI&lt;br/&gt;Port 8000]\n    end\n\n    subgraph \"DevBox Manager Server\"\n        GoServer[Go HTTP Server&lt;br/&gt;main.go]\n        PM[Process Manager&lt;br/&gt;process_manager.go]\n        Routes[API Routes&lt;br/&gt;routes.go]\n        Config[Configuration&lt;br/&gt;config.go]\n        LM[Log Manager&lt;br/&gt;log_manager.go]\n        Proxy[Proxy Handler&lt;br/&gt;proxy.go]\n    end\n\n    subgraph \"Code-Server Instances\"\n        CS1[code-server&lt;br/&gt;:8010]\n        CS2[code-server&lt;br/&gt;:8011]\n        CS3[code-server&lt;br/&gt;:...]\n    end\n\n    subgraph \"Storage\"\n        JSON[(servers.json)]\n        Logs[logs/]\n        Workspaces[workspace/]\n        Data[data/]\n    end\n\n    WebUI --&gt;|HTTP/WebSocket| GoServer\n    GoServer --&gt; PM\n    GoServer --&gt; Routes\n    GoServer --&gt; Config\n    Routes --&gt; PM\n    PM --&gt; LM\n    PM &lt;--&gt;|Read/Write| JSON\n    PM --&gt;|Create/Monitor| CS1\n    PM --&gt;|Create/Monitor| CS2\n    PM --&gt;|Create/Monitor| CS3\n    PM --&gt;|Logs| Logs\n    WebUI --&gt;|Proxy via /vscode/:port| Proxy\n    Proxy --&gt;|Forward| CS1\n    Proxy --&gt;|Forward| CS2\n    Proxy --&gt;|Forward| CS3\n    CS1 --&gt; Workspaces\n    CS2 --&gt; Workspaces\n    CS3 --&gt; Workspaces\n    CS1 --&gt; Data\n    CS2 --&gt; Data\n    CS3 --&gt; Data</code></pre>"},{"location":"architecture/#component-overview","title":"Component Overview","text":""},{"location":"architecture/#1-go-server-databricks_devbox_go","title":"1. Go Server (<code>databricks_devbox_go/</code>)","text":"<p>The core server written in Go using the Gin framework. Responsibilities:</p> <ul> <li>HTTP Server: Serves the web UI and API endpoints</li> <li>Process Management: Creates, starts, stops, and monitors code-server instances</li> <li>Configuration: Loads and manages <code>devbox.yaml</code> configuration</li> <li>Proxying: Routes requests to appropriate code-server instances</li> <li>Logging: Centralized log management with WebSocket streaming</li> <li>Health Monitoring: Tracks server health, CPU, memory, and uptime</li> </ul> <p>Key Files:</p> <ul> <li><code>main.go</code> - Entry point, server initialization</li> <li><code>process_manager.go</code> - Process lifecycle management</li> <li><code>routes.go</code> - API endpoint definitions</li> <li><code>config.go</code> - Configuration loading and validation</li> <li><code>proxy.go</code> - HTTP proxy for code-server instances</li> <li><code>log_manager.go</code> - Log aggregation and streaming</li> </ul>"},{"location":"architecture/#2-python-wrapper-app","title":"2. Python Wrapper (<code>app/</code>)","text":"<p>Python application that wraps the Go server for Databricks App deployment.</p> <p>Key Files:</p> <ul> <li><code>app.py</code> - Main entry point, downloads and starts Go server</li> <li><code>vibe_code.py</code> - Sets up vibe coding tools (Claude Code, CCR, etc.)</li> <li><code>version.py</code> - Version management and GitHub releases</li> <li><code>app.yaml</code> - Databricks App configuration</li> <li><code>devbox.yaml</code> - DevBox configuration (extensions, templates)</li> </ul>"},{"location":"architecture/#3-web-ui-web_ui","title":"3. Web UI (<code>web_ui/</code>)","text":"<p>React-based single-page application built with Vite, TypeScript, and Tailwind CSS.</p> <p>Features:</p> <ul> <li>Server creation and management</li> <li>Real-time status monitoring</li> <li>Log streaming via WebSocket</li> <li>Template selection</li> <li>Extension group configuration</li> </ul>"},{"location":"architecture/#request-flow","title":"Request Flow","text":""},{"location":"architecture/#creating-a-server","title":"Creating a Server","text":"<pre><code>sequenceDiagram\n    participant User\n    participant WebUI\n    participant API\n    participant PM as Process Manager\n    participant FS as File System\n    participant CS as code-server\n\n    User-&gt;&gt;WebUI: Click \"Create Server\"\n    WebUI-&gt;&gt;API: POST /servers {name, extensions, workspace}\n    API-&gt;&gt;PM: CreateServer()\n    PM-&gt;&gt;PM: Generate UUID &amp; assign port\n    PM-&gt;&gt;FS: Create workspace directory\n    PM-&gt;&gt;FS: Create server data directory\n    PM-&gt;&gt;CS: Install extensions\n    PM-&gt;&gt;FS: Save to servers.json\n    PM--&gt;&gt;API: Return server metadata\n    API--&gt;&gt;WebUI: HTTP 201 Created\n    WebUI-&gt;&gt;User: Display new server</code></pre>"},{"location":"architecture/#starting-a-server","title":"Starting a Server","text":"<pre><code>sequenceDiagram\n    participant User\n    participant WebUI\n    participant API\n    participant PM as Process Manager\n    participant CS as code-server\n\n    User-&gt;&gt;WebUI: Click \"Start\"\n    WebUI-&gt;&gt;API: POST /servers/:id/start\n    API-&gt;&gt;PM: StartServer(id)\n    PM-&gt;&gt;PM: Build command with env vars\n    PM-&gt;&gt;CS: exec.Command(\"code-server\", args...)\n    CS--&gt;&gt;PM: Process started (PID)\n    PM-&gt;&gt;PM: Update server status\n    PM-&gt;&gt;PM: Start log capture goroutine\n    PM-&gt;&gt;PM: Start health monitor goroutine\n    PM--&gt;&gt;API: Return success\n    API--&gt;&gt;WebUI: HTTP 200 OK\n    WebUI-&gt;&gt;User: Server status: Running</code></pre>"},{"location":"architecture/#accessing-code-server","title":"Accessing code-server","text":"<pre><code>sequenceDiagram\n    participant Browser\n    participant Proxy\n    participant CS as code-server\n\n    Browser-&gt;&gt;Proxy: GET /vscode/8010/\n    Proxy-&gt;&gt;Proxy: Parse port from URL\n    Proxy-&gt;&gt;Proxy: Find server by port\n    Proxy-&gt;&gt;CS: Forward request to localhost:8010\n    CS--&gt;&gt;Proxy: Return HTML/assets\n    Proxy--&gt;&gt;Browser: Forward response\n    Note over Browser,CS: Subsequent requests follow same pattern</code></pre>"},{"location":"architecture/#data-flow","title":"Data Flow","text":""},{"location":"architecture/#configuration-loading","title":"Configuration Loading","text":"<pre><code>1. main.go starts\n2. InitializeConfig() called\n3. Read DEVBOX_CONFIG_PATH env var (default: app/devbox.yaml)\n4. Parse YAML into DevboxConfig struct\n5. Validate and fill defaults\n6. Store in global config variable\n7. Available to all components via GetConfig()\n</code></pre>"},{"location":"architecture/#server-persistence","title":"Server Persistence","text":"<pre><code>1. Server created/modified\n2. ProcessManager.saveServers() called\n3. Marshal servers map to JSON\n4. Write to data/servers.json\n5. On restart: loadServers() reads JSON\n6. Rebuild in-memory state\n7. Resume health monitoring\n</code></pre>"},{"location":"architecture/#log-streaming","title":"Log Streaming","text":"<pre><code>1. code-server process starts\n2. Capture stdout/stderr pipes\n3. LogManager receives logs\n4. Store in memory ring buffer\n5. WebSocket clients subscribe\n6. Broadcast logs to all connected clients\n7. HTTP API serves recent logs\n</code></pre>"},{"location":"architecture/#process-lifecycle","title":"Process Lifecycle","text":""},{"location":"architecture/#server-states","title":"Server States","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Stopped: Created\n    Stopped --&gt; Running: Start\n    Running --&gt; Stopped: Stop/Crash\n    Running --&gt; Running: Restart\n    Stopped --&gt; [*]: Delete\n    Running --&gt; [*]: Delete (force stop)</code></pre>"},{"location":"architecture/#health-monitoring","title":"Health Monitoring","text":"<p>Every 30 seconds, for each running server:</p> <ol> <li>Check if PID exists</li> <li>Make HTTP request to <code>http://localhost:&lt;port&gt;/healthz</code></li> <li>Verify response status is 200 and body contains <code>{\"status\": \"alive\"}</code></li> <li>Update metrics (CPU, memory, uptime)</li> <li>If check fails, mark server as stopped</li> </ol>"},{"location":"architecture/#auto-recovery","title":"Auto-Recovery","text":"<p>Servers are not automatically restarted on crash. This is intentional:</p> <ul> <li>Prevents infinite crash loops</li> <li>Allows inspection of crash state</li> <li>User decides whether to restart</li> </ul>"},{"location":"architecture/#port-management","title":"Port Management","text":""},{"location":"architecture/#port-allocation","title":"Port Allocation","text":"<pre><code>nextPort = 8500  # Start from 8500\nportMap = {}     # Maps port \u2192 server_id\n\ndef getNextAvailablePort():\n    while nextPort in portMap:\n        nextPort++\n    portMap[nextPort] = \"\"  # Reserve\n    return nextPort\n</code></pre>"},{"location":"architecture/#port-range","title":"Port Range","text":"<ul> <li>Manager Server: 8000 (or <code>DEVBOX_SERVER_PORT</code>)</li> <li>code-server Instances: 8010-8100 (configurable in devbox.yaml)</li> <li>Default Start: 8500 (historical reasons, configurable via code)</li> </ul>"},{"location":"architecture/#security-model","title":"Security Model","text":""},{"location":"architecture/#authentication","title":"Authentication","text":"<ul> <li>Databricks App: Uses Databricks SSO</li> <li>Local: No authentication (development only)</li> <li>code-server: <code>--auth none</code> (protected by DevBox proxy)</li> </ul>"},{"location":"architecture/#isolation","title":"Isolation","text":"<ul> <li>Workspaces: Each server has isolated workspace directory</li> <li>Data: Separate data directory per server (<code>data/&lt;server-id&gt;/</code>)</li> <li>Logs: Isolated log files per server</li> <li>Processes: Independent code-server processes</li> </ul>"},{"location":"architecture/#token-management","title":"Token Management","text":"<p>For vibe coding tools (Claude Code, CCR):</p> <ol> <li>Generate token via <code>WorkspaceClient().tokens.create()</code></li> <li>Store in CCR configuration</li> <li>Auto-refresh on expiry (configured via <code>CLAUDE_CODE_TOKEN_EXPIRY_SECONDS</code>)</li> </ol>"},{"location":"architecture/#scalability","title":"Scalability","text":""},{"location":"architecture/#current-limits","title":"Current Limits","text":"<ul> <li>Concurrent Servers: Limited by available ports (default: 90 ports from 8010-8100)</li> <li>Memory: Each code-server instance uses ~200-500 MB</li> <li>CPU: Depends on workload in each instance</li> </ul>"},{"location":"architecture/#optimization-strategies","title":"Optimization Strategies","text":"<ul> <li>Use shared extension cache (XDG_DATA_HOME per server)</li> <li>Limit concurrent server starts</li> <li>Implement server hibernation for idle instances</li> <li>Use server pools for common configurations</li> </ul>"},{"location":"architecture/#next-steps","title":"Next Steps","text":"<ul> <li> <p>Go Binary Details \u2192</p> <p>Deep dive into Go components</p> </li> <li> <p>Process Management \u2192</p> <p>How code-server instances are managed</p> </li> <li> <p>Web UI \u2192</p> <p>Frontend architecture</p> </li> </ul>"},{"location":"architecture/go-binary/","title":"Go Binary Components","text":"<p>The Go server is the heart of Databricks DevBox, managing all code-server instances and providing the API layer.</p>"},{"location":"architecture/go-binary/#file-structure","title":"File Structure","text":"<pre><code>databricks_devbox_go/\n\u251c\u2500\u2500 main.go              # Entry point, server initialization\n\u251c\u2500\u2500 process_manager.go   # Core process lifecycle management (1595 lines)\n\u251c\u2500\u2500 routes.go           # API endpoint definitions (672 lines)\n\u251c\u2500\u2500 config.go           # Configuration loading and parsing (249 lines)\n\u251c\u2500\u2500 proxy.go            # HTTP proxy to code-server instances\n\u251c\u2500\u2500 log_manager.go      # Log aggregation and WebSocket streaming\n\u251c\u2500\u2500 logger.go           # Process event logging\n\u251c\u2500\u2500 assets.go           # Embedded web UI assets\n\u2514\u2500\u2500 go.mod              # Go module dependencies\n</code></pre>"},{"location":"architecture/go-binary/#core-components","title":"Core Components","text":""},{"location":"architecture/go-binary/#1-main-server-maingo","title":"1. Main Server (<code>main.go</code>)","text":"<p>Entry point and HTTP server setup using Gin framework.</p> <p>Key Functions:</p> <pre><code>func main() {\n    // Initialize configuration\n    InitializeConfig()\n\n    // Create services\n    logManager := NewLogManager()\n    processManager := NewProcessManager()\n\n    // Setup router with middleware\n    r := gin.New()\n    r.Use(gin.Logger())\n    r.Use(gin.Recovery())\n    r.Use(CORSMiddleware())\n\n    // Setup routes\n    setupRoutes(r, processManager, logManager)\n\n    // Start server\n    srv := &amp;http.Server{\n        Addr: \":\" + port,\n        Handler: r,\n    }\n    srv.ListenAndServe()\n}\n</code></pre> <p>Middleware:</p> <ul> <li><code>gin.Logger()</code> - Request logging</li> <li><code>gin.Recovery()</code> - Panic recovery</li> <li><code>CORSMiddleware()</code> - CORS headers for web UI</li> </ul>"},{"location":"architecture/go-binary/#2-process-manager-process_managergo","title":"2. Process Manager (<code>process_manager.go</code>)","text":"<p>The most complex component, handling all code-server instance lifecycle.</p> <p>Data Structures:</p> <pre><code>type ProcessManager struct {\n    servers                map[string]*ServerInstance\n    mutex                  sync.RWMutex\n    portMap                map[int]string  // port \u2192 server_id\n    nextPort               int\n    logger                 *ProcessLogger\n    logManager             *LogManager\n    dataDir                string\n    serversFile            string\n    extensionProgress      map[string]*ExtensionInstallationProgress\n    extensionProgressMutex sync.RWMutex\n}\n\ntype ServerInstance struct {\n    ID            string       `json:\"id\"`\n    Name          string       `json:\"name\"`\n    Port          int          `json:\"port\"`\n    WorkspacePath string       `json:\"workspace_path\"`\n    Extensions    []string     `json:\"extensions\"`\n    Status        ServerStatus `json:\"status\"`  // running/stopped/failed\n    PID           *int         `json:\"pid,omitempty\"`\n    StartTime     *time.Time   `json:\"start_time,omitempty\"`\n    Command       []string     `json:\"command,omitempty\"`\n    Uptime        *float64     `json:\"uptime,omitempty\"`\n    CPUPercent    *float64     `json:\"cpu_percent,omitempty\"`\n    MemoryMB      *float64     `json:\"memory_mb,omitempty\"`\n    LastUpdate    *time.Time   `json:\"last_update,omitempty\"`\n}\n</code></pre> <p>Key Methods:</p> Method Description Location <code>NewProcessManager()</code> Initialize manager, load state process_manager.go:84 <code>CreateServer()</code> Create server with extensions &amp; workspace process_manager.go:131 <code>StartServer()</code> Start code-server process process_manager.go:239 <code>StopServer()</code> Stop running server process_manager.go:357 <code>DeleteServer()</code> Remove server and cleanup process_manager.go:410 <code>RestartServer()</code> Stop and start server process_manager.go:748 <code>GetServerHealth()</code> Get health metrics process_manager.go:574 <code>installExtensions()</code> Install VS Code extensions process_manager.go:800 <p>Background Goroutines:</p> <pre><code>// Health monitoring (every 30 seconds)\ngo pm.startHealthMonitor()  // process_manager.go:102\n\n// State refresh from disk (every 1 second)\ngo pm.startStateRefreshRoutine()  // process_manager.go:104\n\n// Per-server process monitoring\ngo pm.monitorProcess(id, cmd)  // process_manager.go:352\n</code></pre>"},{"location":"architecture/go-binary/#3-configuration-configgo","title":"3. Configuration (<code>config.go</code>)","text":"<p>Loads and validates <code>devbox.yaml</code> configuration.</p> <p>Data Structures:</p> <pre><code>type DevboxConfig struct {\n    ExtensionGroups map[string]ExtensionGroup\n    Server          ServerConfig\n    UI              UIConfig\n    PackagedAssets  *PackagedAssets\n}\n\ntype ExtensionGroup struct {\n    Name         string\n    Description  string\n    Extensions   []string\n    UserSettings map[string]interface{}  // VS Code settings\n}\n</code></pre> <p>Loading Process:</p> <pre><code>// 1. Read DEVBOX_CONFIG_PATH env var\nconfigPath := os.Getenv(\"DEVBOX_CONFIG_PATH\")\nif configPath == \"\" {\n    configPath = \"app/devbox.yaml\"  // Default\n}\n\n// 2. Load YAML file\nconfig, err := loadConfigFromFile(configPath)\n\n// 3. Validate and fill defaults\nconfig = validateAndFillDefaults(config)\n\n// 4. Store globally\nglobalConfig = config\n</code></pre>"},{"location":"architecture/go-binary/#4-api-routes-routesgo","title":"4. API Routes (<code>routes.go</code>)","text":"<p>Defines all REST API endpoints using Gin handlers.</p> <p>Route Groups:</p> <pre><code>// Health check\nr.GET(\"/health\", ...)\n\n// Configuration\nr.GET(\"/config\", getConfig())\nr.GET(\"/templates\", getTemplates())\n\n// Server management\nr.GET(\"/servers\", listServers(pm))\nr.POST(\"/servers\", createServer(pm))\nr.POST(\"/servers/:id/start\", startServer(pm))\nr.POST(\"/servers/:id/stop\", stopServer(pm))\nr.POST(\"/servers/:id/restart\", restartServer(pm))\nr.DELETE(\"/servers/:id\", deleteServer(pm))\n\n// Health &amp; logs\nr.GET(\"/servers/:id/health\", getServerHealth(pm))\nr.GET(\"/servers/:id/logs\", getServerLogs(pm))\n\n// WebSocket\nr.GET(\"/ws/logs\", ...)\nr.GET(\"/ws/logs/:serverId\", ...)\n\n// Proxy to code-server\nr.Any(\"/vscode/:port/*path\", proxyToCodeServer(pm))\n</code></pre> <p>Handler Pattern:</p> <pre><code>func startServer(pm *ProcessManager) gin.HandlerFunc {\n    return func(c *gin.Context) {\n        id := c.Param(\"id\")\n\n        if err := pm.StartServer(id); err != nil {\n            c.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\n            return\n        }\n\n        server, _ := pm.GetServer(id)\n        c.JSON(http.StatusOK, gin.H{\n            \"status\": \"success\",\n            \"data\": server,\n        })\n    }\n}\n</code></pre>"},{"location":"architecture/go-binary/#5-proxy-handler-proxygo","title":"5. Proxy Handler (<code>proxy.go</code>)","text":"<p>Forwards requests from <code>/vscode/:port/*</code> to code-server instances.</p> <p>Implementation:</p> <pre><code>func proxyToCodeServer(pm *ProcessManager) gin.HandlerFunc {\n    return func(c *gin.Context) {\n        // Extract port from URL\n        portStr := c.Param(\"port\")\n        port, _ := strconv.Atoi(portStr)\n\n        // Find server by port\n        server, err := pm.GetServerByPort(port)\n        if err != nil {\n            c.JSON(404, gin.H{\"error\": \"Server not found\"})\n            return\n        }\n\n        // Build target URL\n        targetURL := fmt.Sprintf(\"http://localhost:%d\", port)\n\n        // Create reverse proxy\n        proxy := httputil.NewSingleHostReverseProxy(targetURL)\n        proxy.ServeHTTP(c.Writer, c.Request)\n    }\n}\n</code></pre> <p>URL Rewriting:</p> <pre><code>User Request: /vscode/8010/path/to/file\nProxy To: http://localhost:8010/path/to/file\n</code></pre>"},{"location":"architecture/go-binary/#6-log-manager-log_managergo","title":"6. Log Manager (<code>log_manager.go</code>)","text":"<p>Aggregates logs from all code-server instances and streams via WebSocket.</p> <p>Features:</p> <ul> <li>In-memory ring buffer for recent logs</li> <li>WebSocket broadcasting to connected clients</li> <li>Per-server log isolation</li> <li>System-wide log aggregation</li> </ul> <p>WebSocket Protocol:</p> <pre><code>{\n  \"type\": \"log\",\n  \"server_id\": \"uuid\",\n  \"server_name\": \"my-server\",\n  \"level\": \"INFO\",\n  \"source\": \"server\",\n  \"message\": \"Server started\",\n  \"timestamp\": \"2025-01-15T10:30:00Z\"\n}\n</code></pre>"},{"location":"architecture/go-binary/#code-server-process-lifecycle","title":"Code-Server Process Lifecycle","text":""},{"location":"architecture/go-binary/#starting-a-server","title":"Starting a Server","text":"<pre><code>func (pm *ProcessManager) StartServer(id string) error {\n    // 1. Get server metadata\n    server := pm.servers[id]\n\n    // 2. Create data directories\n    userDataDir := filepath.Join(pm.dataDir, id)\n    configDir := filepath.Join(userDataDir, \"code-server\")\n    os.MkdirAll(configDir, 0755)\n\n    // 3. Build command\n    cmd := exec.Command(\"code-server\",\n        \"--bind-addr\", fmt.Sprintf(\"0.0.0.0:%d\", server.Port),\n        \"--user-data-dir\", configDir,\n        \"--auth\", \"none\",\n        \"--disable-telemetry\",\n        server.WorkspacePath,\n    )\n\n    // 4. Set environment variables\n    cmd.Env = []string{\n        fmt.Sprintf(\"XDG_DATA_HOME=%s\", userDataDir),\n        \"NODE_OPTIONS=--max-old-space-size=2048\",\n        // ... more env vars\n    }\n\n    // 5. Start process\n    cmd.Start()\n\n    // 6. Update server state\n    server.PID = cmd.Process.Pid\n    server.Status = StatusRunning\n    pm.saveServers()\n\n    // 7. Monitor process\n    go pm.monitorProcess(id, cmd)\n\n    return nil\n}\n</code></pre>"},{"location":"architecture/go-binary/#extension-installation","title":"Extension Installation","text":"<pre><code>func (pm *ProcessManager) installExtension(env []string, extensionID string) bool {\n    // Run: code-server --install-extension &lt;extension-id&gt;\n    cmd := exec.Command(\"code-server\", \"--install-extension\", extensionID)\n    cmd.Env = env  // Include XDG_DATA_HOME\n\n    output, err := cmd.Output()\n    return err == nil\n}\n</code></pre>"},{"location":"architecture/go-binary/#health-checking","title":"Health Checking","text":"<pre><code>func (pm *ProcessManager) isServerHealthy(port int) bool {\n    // 1. HTTP client with timeout\n    client := &amp;http.Client{Timeout: 3 * time.Second}\n\n    // 2. Request health endpoint\n    resp, err := client.Get(fmt.Sprintf(\"http://localhost:%d/healthz\", port))\n    if err != nil {\n        return false\n    }\n    defer resp.Body.Close()\n\n    // 3. Check response\n    if resp.StatusCode != 200 {\n        return false\n    }\n\n    // 4. Parse JSON\n    var healthResponse struct {\n        Status        string `json:\"status\"`\n        LastHeartbeat int64  `json:\"lastHeartbeat\"`\n    }\n    json.NewDecoder(resp.Body).Decode(&amp;healthResponse)\n\n    return healthResponse.Status == \"alive\"\n}\n</code></pre>"},{"location":"architecture/go-binary/#metrics-collection","title":"Metrics Collection","text":"<p>Using <code>github.com/shirou/gopsutil/v3/process</code>:</p> <pre><code>func (pm *ProcessManager) updateServerMetrics() {\n    for _, server := range pm.servers {\n        if server.PID != nil {\n            proc, _ := process.NewProcess(int32(*server.PID))\n\n            // CPU usage\n            cpuPercent, _ := proc.CPUPercent()\n            server.CPUPercent = &amp;cpuPercent\n\n            // Memory usage\n            memInfo, _ := proc.MemoryInfo()\n            memoryMB := float64(memInfo.RSS) / 1024 / 1024\n            server.MemoryMB = &amp;memoryMB\n\n            // Uptime\n            uptime := time.Since(*server.StartTime).Seconds()\n            server.Uptime = &amp;uptime\n        }\n    }\n    pm.saveServers()\n}\n</code></pre>"},{"location":"architecture/go-binary/#performance-considerations","title":"Performance Considerations","text":""},{"location":"architecture/go-binary/#concurrency","title":"Concurrency","text":"<ul> <li>RWMutex: Used for server map access</li> <li>Read-heavy operations use <code>RLock()</code></li> <li>Write operations use <code>Lock()</code></li> <li>Goroutines: One per running server for monitoring</li> <li>Channel Communication: For log streaming</li> </ul>"},{"location":"architecture/go-binary/#memory-management","title":"Memory Management","text":"<ul> <li>Ring Buffers: For log storage (limited size)</li> <li>Connection Pooling: HTTP client reuse</li> <li>Cleanup: Proper resource cleanup on server deletion</li> </ul>"},{"location":"architecture/go-binary/#file-io","title":"File I/O","text":"<ul> <li>Atomic Writes: <code>os.WriteFile()</code> for <code>servers.json</code></li> <li>Frequent Saves: Every state change persisted</li> <li>Reload on Refresh: State refreshed every second from disk</li> </ul>"},{"location":"architecture/go-binary/#dependencies","title":"Dependencies","text":"<pre><code>require (\n    github.com/gin-gonic/gin v1.9.1\n    github.com/google/uuid v1.3.0\n    github.com/shirou/gopsutil/v3 v3.23.0\n    gopkg.in/yaml.v2 v2.4.0\n)\n</code></pre>"},{"location":"architecture/go-binary/#building","title":"Building","text":"<pre><code># Build for current platform\ngo build -o databricks-devbox *.go\n\n# Build with version info\ngo build -ldflags \"-X main.version=0.1.0\" -o databricks-devbox *.go\n\n# Cross-compile for multiple platforms\nGOOS=linux GOARCH=amd64 go build -o databricks-devbox-linux-amd64 *.go\nGOOS=darwin GOARCH=arm64 go build -o databricks-devbox-darwin-arm64 *.go\n</code></pre>"},{"location":"architecture/go-binary/#next-steps","title":"Next Steps","text":"<ul> <li> <p>Process Management \u2192</p> <p>Detailed process lifecycle</p> </li> <li> <p>Configuration \u2192</p> <p>Configuration reference</p> </li> </ul>"},{"location":"architecture/process-management/","title":"Process Management","text":"<p>Deep dive into how Databricks DevBox manages code-server processes throughout their lifecycle.</p>"},{"location":"architecture/process-management/#process-lifecycle","title":"Process Lifecycle","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Created: CreateServer()\n    Created --&gt; ExtensionInstallation: installExtensions()\n    ExtensionInstallation --&gt; Stopped: Installation complete\n    Stopped --&gt; Starting: StartServer()\n    Starting --&gt; Running: Process spawned\n    Running --&gt; Monitoring: Health checks begin\n    Monitoring --&gt; Running: Healthy\n    Monitoring --&gt; Stopped: Health check failed\n    Running --&gt; Stopping: StopServer()\n    Stopping --&gt; Stopped: Process terminated\n    Stopped --&gt; Starting: RestartServer()\n    Running --&gt; [*]: DeleteServer()\n    Stopped --&gt; [*]: DeleteServer()</code></pre>"},{"location":"architecture/process-management/#server-creation-flow","title":"Server Creation Flow","text":""},{"location":"architecture/process-management/#1-metadata-creation","title":"1. Metadata Creation","text":"<pre><code>// process_manager.go:131\nfunc (pm *ProcessManager) CreateServer(name, workspacePath string, extensions []string, zipFile, githubURL string) (*ServerInstance, error) {\n    // Generate unique ID\n    id := uuid.New().String()\n\n    // Assign available port\n    port := pm.getNextAvailablePort()  // Starts from 8500\n\n    // Create workspace directory\n    if workspacePath == \"\" {\n        workspacePath = filepath.Join(\"workspace\", id)\n    }\n    absWorkspacePath, _ := filepath.Abs(workspacePath)\n    os.MkdirAll(absWorkspacePath, 0755)\n\n    // Create server data directory\n    serverDataDir := filepath.Join(pm.dataDir, id)  // data/&lt;server-id&gt;\n    os.MkdirAll(serverDataDir, 0755)\n\n    // Create server instance\n    server := &amp;ServerInstance{\n        ID:            id,\n        Name:          name,\n        Port:          port,\n        WorkspacePath: absWorkspacePath,\n        Extensions:    extensions,\n        Status:        StatusStopped,  // Not started yet\n    }\n\n    // Store in memory and persist\n    pm.servers[id] = server\n    pm.portMap[port] = id\n    pm.saveServers()\n\n    return server, nil\n}\n</code></pre>"},{"location":"architecture/process-management/#2-workspace-initialization","title":"2. Workspace Initialization","text":"<p>From ZIP file:</p> <pre><code>// process_manager.go:693\nfunc (pm *ProcessManager) extractZipFile(zipPath, targetPath string) error {\n    reader, _ := zip.OpenReader(zipPath)\n    defer reader.Close()\n\n    for _, file := range reader.File {\n        // Sanitize path (prevent directory traversal)\n        if strings.Contains(file.Name, \"..\") {\n            continue\n        }\n\n        filePath := filepath.Join(targetPath, file.Name)\n\n        if file.FileInfo().IsDir() {\n            os.MkdirAll(filePath, file.FileInfo().Mode())\n        } else {\n            // Extract file\n            fileReader, _ := file.Open()\n            targetFile, _ := os.Create(filePath)\n            io.Copy(targetFile, fileReader)\n            targetFile.Close()\n            fileReader.Close()\n        }\n    }\n\n    return nil\n}\n</code></pre> <p>From GitHub:</p> <pre><code>// process_manager.go:739\nfunc (pm *ProcessManager) cloneGithubRepo(repoURL, targetPath string) error {\n    cmd := exec.Command(\"git\", \"clone\", repoURL, targetPath)\n    return cmd.Run()\n}\n</code></pre>"},{"location":"architecture/process-management/#3-extension-installation","title":"3. Extension Installation","text":"<p>Synchronous installation (blocks server creation until complete):</p> <pre><code>// process_manager.go:777\nfunc (pm *ProcessManager) installExtension(env []string, extensionID, serverID, serverName string) bool {\n    cmd := exec.Command(\"code-server\", \"--install-extension\", extensionID)\n    cmd.Env = env  // Must include XDG_DATA_HOME\n\n    stdout, err := cmd.Output()\n    if err != nil {\n        pm.logger.LogProcessEvent(serverID, serverName, \"EXTENSION_INSTALL_FAILED\", err.Error())\n        return false\n    }\n\n    pm.logger.LogProcessEvent(serverID, serverName, \"EXTENSION_INSTALLED\", extensionID)\n    return true\n}\n</code></pre> <p>Environment for extension installation:</p> <pre><code>env := os.Environ()\nuserDataDir := filepath.Join(pm.dataDir, serverID)  // data/&lt;server-id&gt;\nabsDataDir, _ := filepath.Abs(userDataDir)\n\nenv = append(env,\n    fmt.Sprintf(\"XDG_DATA_HOME=%s\", absDataDir),  // Tells code-server where to install\n)\n</code></pre> <p>User settings application:</p> <p>After extensions are installed, apply user settings from <code>devbox.yaml</code>:</p> <pre><code>// process_manager.go:1287\nfunc (pm *ProcessManager) applyUserSettings(serverID string, installedExtensions []string) error {\n    config := GetConfig()\n\n    // Collect user settings from extension groups\n    userSettings := make(map[string]interface{})\n    for groupName, group := range config.ExtensionGroups {\n        if group.UserSettings != nil {\n            // Merge settings\n            for key, value := range group.UserSettings {\n                userSettings[key] = value\n            }\n        }\n    }\n\n    // Write to settings.json\n    settingsFile := filepath.Join(pm.dataDir, serverID, \"code-server\", \"User\", \"settings.json\")\n    data, _ := json.MarshalIndent(userSettings, \"\", \"  \")\n    os.WriteFile(settingsFile, data, 0644)\n\n    return nil\n}\n</code></pre>"},{"location":"architecture/process-management/#starting-a-server","title":"Starting a Server","text":""},{"location":"architecture/process-management/#0-port-cleanup-pre-start","title":"0. Port Cleanup (Pre-start)","text":"<p>Before starting a server, the system automatically kills any existing process on the target port:</p> <pre><code>// process_manager.go:131\nfunc (pm *ProcessManager) killProcessOnPort(port int) error {\n    // Use lsof to find the process using the port\n    cmd := exec.Command(\"lsof\", \"-ti\", fmt.Sprintf(\":%d\", port))\n    output, err := cmd.Output()\n    if err != nil {\n        // No process found on port (which is fine)\n        return nil\n    }\n\n    // Parse PIDs from output (one per line)\n    pidStr := strings.TrimSpace(string(output))\n    if pidStr == \"\" {\n        return nil\n    }\n\n    // Split by newlines in case multiple processes are on the port\n    pids := strings.Split(pidStr, \"\\n\")\n    for _, pidLine := range pids {\n        pidLine = strings.TrimSpace(pidLine)\n        if pidLine == \"\" {\n            continue\n        }\n\n        // Kill the process with SIGKILL\n        killCmd := exec.Command(\"kill\", \"-9\", pidLine)\n        if err := killCmd.Run(); err != nil {\n            log.Printf(\"Failed to kill process %s on port %d: %v\", pidLine, port, err)\n        } else {\n            log.Printf(\"Killed existing process %s on port %d\", pidLine, port)\n        }\n    }\n\n    return nil\n}\n</code></pre> <p>When this happens:</p> <ul> <li>User clicks the play button to start a code-server</li> <li>System checks if any process is listening on the assigned port</li> <li>If a process exists, it's forcefully terminated with <code>kill -9</code></li> <li>If no process exists, the system continues normally</li> <li>The code-server then starts on the now-free port</li> </ul> <p>Use cases:</p> <ul> <li>Stale processes: A previous code-server instance didn't shut down cleanly</li> <li>Port conflicts: Another application is using the port</li> <li>Development: You manually started a process on the port for testing</li> </ul>"},{"location":"architecture/process-management/#1-build-command-and-environment","title":"1. Build Command and Environment","text":"<pre><code>// process_manager.go:239\nfunc (pm *ProcessManager) StartServer(id string) error {\n    server := pm.servers[id]\n\n    // Kill any existing process on the port before starting\n    if err := pm.killProcessOnPort(server.Port); err != nil {\n        log.Printf(\"Warning: Failed to kill existing process on port %d: %v\", server.Port, err)\n        // Continue anyway - the port might just be free\n    }\n\n    // Create config directory\n    userDataDir := filepath.Join(pm.dataDir, id)\n    configDir := filepath.Join(userDataDir, \"code-server\")\n    os.MkdirAll(configDir, 0755)\n\n    // Build command\n    args := []string{\n        \"--bind-addr\", fmt.Sprintf(\"0.0.0.0:%d\", server.Port),\n        \"--user-data-dir\", configDir,\n        \"--auth\", \"none\",\n        \"--disable-telemetry\",\n        \"--disable-update-check\",\n        \"--disable-file-downloads\",\n        \"--log\", \"info\",\n        server.WorkspacePath,\n    }\n\n    cmd := exec.Command(\"code-server\", args...)\n    cmd.Dir = server.WorkspacePath\n\n    // Set environment\n    env := os.Environ()\n    absDataDir, _ := filepath.Abs(userDataDir)\n\n    env = append(env,\n        fmt.Sprintf(\"XDG_DATA_HOME=%s\", absDataDir),\n        \"NODE_OPTIONS=--max-old-space-size=2048\",\n        \"VSCODE_LOGS=info\",\n        \"CODE_SERVER_LOG=info\",\n        \"UV_THREADPOOL_SIZE=128\",\n        \"NODE_TLS_REJECT_UNAUTHORIZED=0\",\n        \"VSCODE_DISABLE_CRASH_REPORTER=true\",\n        \"ELECTRON_NO_ATTACH_CONSOLE=1\",\n        \"DISABLE_TELEMETRY=true\",\n    )\n    cmd.Env = env\n\n    // Start process\n    return cmd.Start()\n}\n</code></pre>"},{"location":"architecture/process-management/#2-output-capture","title":"2. Output Capture","text":"<pre><code>// Get stdout/stderr pipes\nstdout, _ := cmd.StdoutPipe()\nstderr, _ := cmd.StderrPipe()\n\n// Start output capture in goroutine\noutputCapture := NewEnhancedProcessOutputCapture(pm.logger, pm.logManager, id, serverName)\ngo outputCapture.CaptureOutput(stdout, stderr)\n</code></pre>"},{"location":"architecture/process-management/#3-update-server-state","title":"3. Update Server State","text":"<pre><code>// Update metadata\nnow := time.Now()\nserver.PID = &amp;cmd.Process.Pid\nserver.StartTime = &amp;now\nserver.Status = StatusRunning\nserver.Command = append([]string{\"code-server\"}, args...)\n\n// Persist to disk\npm.saveServers()\n\n// Start monitoring\ngo pm.monitorProcess(id, cmd)\n</code></pre>"},{"location":"architecture/process-management/#process-monitoring","title":"Process Monitoring","text":""},{"location":"architecture/process-management/#per-process-monitor","title":"Per-Process Monitor","text":"<p>Each running server has a dedicated goroutine:</p> <pre><code>// process_manager.go:516\nfunc (pm *ProcessManager) monitorProcess(id string, cmd *exec.Cmd) {\n    // Wait for process to exit\n    err := cmd.Wait()\n\n    pm.mutex.Lock()\n    defer pm.mutex.Unlock()\n\n    server := pm.servers[id]\n\n    if err != nil {\n        log.Printf(\"Server %s exited with error: %v\", server.Name, err)\n        pm.logger.LogProcessEvent(id, server.Name, \"PROCESS_EXITED_ERROR\", err.Error())\n        server.Status = StatusFailed\n    } else {\n        log.Printf(\"Server %s exited normally\", server.Name)\n        pm.logger.LogProcessEvent(id, server.Name, \"PROCESS_EXITED\", \"Normal exit\")\n        server.Status = StatusStopped\n    }\n\n    server.PID = nil\n    server.StartTime = nil\n    pm.saveServers()\n}\n</code></pre>"},{"location":"architecture/process-management/#global-health-monitor","title":"Global Health Monitor","text":"<p>Single goroutine monitors all servers every 30 seconds:</p> <pre><code>// process_manager.go:884\nfunc (pm *ProcessManager) startHealthMonitor() {\n    ticker := time.NewTicker(30 * time.Second)\n    defer ticker.Stop()\n\n    for range ticker.C {\n        pm.performHealthCheck()\n    }\n}\n\nfunc (pm *ProcessManager) performHealthCheck() {\n    pm.mutex.Lock()\n    defer pm.mutex.Unlock()\n\n    for serverID, server := range pm.servers {\n        if server.Status == StatusRunning &amp;&amp; server.PID != nil {\n            // Check HTTP health endpoint\n            isHealthy := pm.isServerHealthy(server.Port)\n\n            if !isHealthy {\n                log.Printf(\"Health check failed for server %s\", server.Name)\n                server.Status = StatusStopped\n                server.PID = nil\n                server.StartTime = nil\n                pm.saveServers()\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"architecture/process-management/#health-check-implementation","title":"Health Check Implementation","text":"<pre><code>// process_manager.go:951\nfunc (pm *ProcessManager) isServerHealthy(port int) bool {\n    client := &amp;http.Client{\n        Timeout: 3 * time.Second,\n        CheckRedirect: func(req *http.Request, via []*http.Request) error {\n            return http.ErrUseLastResponse  // Don't follow redirects\n        },\n    }\n\n    // Wake up server with root request (ignore result)\n    rootResp, _ := client.Get(fmt.Sprintf(\"http://localhost:%d/\", port))\n    if rootResp != nil {\n        rootResp.Body.Close()\n    }\n\n    // Check health endpoint\n    resp, err := client.Get(fmt.Sprintf(\"http://localhost:%d/healthz\", port))\n    if err != nil {\n        return false\n    }\n    defer resp.Body.Close()\n\n    if resp.StatusCode != http.StatusOK {\n        return false\n    }\n\n    // Parse response\n    var healthResponse struct {\n        Status        string `json:\"status\"`\n        LastHeartbeat int64  `json:\"lastHeartbeat\"`\n    }\n    json.NewDecoder(resp.Body).Decode(&amp;healthResponse)\n\n    return healthResponse.Status == \"alive\"\n}\n</code></pre>"},{"location":"architecture/process-management/#metrics-collection","title":"Metrics Collection","text":"<p>Every second, update metrics for running servers:</p> <pre><code>// process_manager.go:1000\nfunc (pm *ProcessManager) updateServerMetrics() {\n    now := time.Now()\n\n    for _, server := range pm.servers {\n        if server.Status != StatusRunning || server.PID == nil {\n            // Clear metrics for non-running servers\n            server.Uptime = nil\n            server.CPUPercent = nil\n            server.MemoryMB = nil\n            continue\n        }\n\n        // Get process handle\n        proc, err := process.NewProcess(int32(*server.PID))\n        if err != nil {\n            // Process doesn't exist\n            server.Status = StatusStopped\n            server.PID = nil\n            continue\n        }\n\n        // Check if process exists\n        exists, _ := proc.IsRunning()\n        if !exists {\n            server.Status = StatusStopped\n            server.PID = nil\n            continue\n        }\n\n        // Calculate uptime\n        uptime := now.Sub(*server.StartTime).Seconds()\n        server.Uptime = &amp;uptime\n\n        // Get CPU usage\n        cpuPercent, _ := proc.CPUPercent()\n        server.CPUPercent = &amp;cpuPercent\n\n        // Get memory usage\n        memInfo, _ := proc.MemoryInfo()\n        memoryMB := float64(memInfo.RSS) / 1024 / 1024\n        server.MemoryMB = &amp;memoryMB\n\n        // Update timestamp\n        server.LastUpdate = &amp;now\n    }\n}\n</code></pre>"},{"location":"architecture/process-management/#stopping-a-server","title":"Stopping a Server","text":""},{"location":"architecture/process-management/#graceful-shutdown","title":"Graceful Shutdown","text":"<pre><code>// process_manager.go:357\nfunc (pm *ProcessManager) StopServer(id string) error {\n    server := pm.servers[id]\n\n    if server.PID == nil {\n        return fmt.Errorf(\"server not running\")\n    }\n\n    // Find process\n    proc, err := os.FindProcess(*server.PID)\n    if err != nil {\n        return err\n    }\n\n    // Send SIGTERM for graceful shutdown\n    if err := proc.Signal(syscall.SIGTERM); err == nil {\n        // Wait up to 10 seconds\n        go func() {\n            time.Sleep(10 * time.Second)\n\n            pm.mutex.Lock()\n            defer pm.mutex.Unlock()\n\n            // Force kill if still running\n            if server.PID != nil {\n                if p, err := os.FindProcess(*server.PID); err == nil {\n                    p.Kill()\n                }\n            }\n\n            server.Status = StatusStopped\n            server.PID = nil\n            pm.saveServers()\n        }()\n    } else {\n        // SIGTERM failed, force kill\n        proc.Kill()\n    }\n\n    // Immediately mark as stopped\n    server.Status = StatusStopped\n    server.PID = nil\n    server.StartTime = nil\n    pm.saveServers()\n\n    return nil\n}\n</code></pre>"},{"location":"architecture/process-management/#deleting-a-server","title":"Deleting a Server","text":""},{"location":"architecture/process-management/#complete-cleanup","title":"Complete Cleanup","text":"<pre><code>// process_manager.go:410\nfunc (pm *ProcessManager) DeleteServer(id string) error {\n    server := pm.servers[id]\n\n    // Stop if running\n    if server.Status == StatusRunning &amp;&amp; server.PID != nil {\n        proc, _ := os.FindProcess(*server.PID)\n        proc.Kill()\n    }\n\n    // Clean up directories\n    dataDir := filepath.Join(pm.dataDir, id)\n    os.RemoveAll(dataDir)  // Remove data/&lt;server-id&gt;\n\n    os.RemoveAll(server.WorkspacePath)  // Remove workspace\n\n    logsDir := filepath.Join(\"logs\", id)\n    os.RemoveAll(logsDir)  // Remove logs/&lt;server-id&gt;\n\n    // Remove from maps\n    delete(pm.portMap, server.Port)\n    delete(pm.servers, id)\n\n    // Persist\n    pm.saveServers()\n\n    return nil\n}\n</code></pre>"},{"location":"architecture/process-management/#state-persistence","title":"State Persistence","text":""},{"location":"architecture/process-management/#save-state","title":"Save State","text":"<pre><code>// process_manager.go:679\nfunc (pm *ProcessManager) saveServers() {\n    data, _ := json.MarshalIndent(pm.servers, \"\", \"  \")\n    os.WriteFile(pm.serversFile, data, 0644)  // data/servers.json\n}\n</code></pre>"},{"location":"architecture/process-management/#load-state","title":"Load State","text":"<pre><code>// process_manager.go:652\nfunc (pm *ProcessManager) loadServersFromFile() {\n    data, _ := os.ReadFile(pm.serversFile)\n\n    var servers map[string]*ServerInstance\n    json.Unmarshal(data, &amp;servers)\n\n    // Restore in-memory state\n    pm.servers = servers\n    pm.portMap = make(map[int]string)\n\n    // Rebuild port map\n    for id, server := range servers {\n        pm.portMap[server.Port] = id\n        if server.Port &gt;= pm.nextPort {\n            pm.nextPort = server.Port + 1\n        }\n    }\n}\n</code></pre>"},{"location":"architecture/process-management/#state-refresh","title":"State Refresh","text":"<p>Every second, reload state from disk to catch external changes:</p> <pre><code>// process_manager.go:821\nfunc (pm *ProcessManager) startStateRefreshRoutine() {\n    ticker := time.NewTicker(1 * time.Second)\n    defer ticker.Stop()\n\n    for range ticker.C {\n        pm.refreshStateFromFile()\n    }\n}\n</code></pre>"},{"location":"architecture/process-management/#concurrency-thread-safety","title":"Concurrency &amp; Thread Safety","text":""},{"location":"architecture/process-management/#locking-strategy","title":"Locking Strategy","text":"<pre><code>// Read operations\npm.mutex.RLock()\nserver := pm.servers[id]\npm.mutex.RUnlock()\n\n// Write operations\npm.mutex.Lock()\npm.servers[id] = newServer\npm.saveServers()\npm.mutex.Unlock()\n</code></pre>"},{"location":"architecture/process-management/#goroutine-management","title":"Goroutine Management","text":"<ul> <li>1 global health monitor (all servers)</li> <li>1 global state refresher (all servers)</li> <li>N process monitors (1 per running server)</li> <li>N log capture goroutines (1 per running server)</li> </ul>"},{"location":"architecture/process-management/#next-steps","title":"Next Steps","text":"<ul> <li> <p>Web UI \u2192</p> <p>Frontend architecture</p> </li> <li> <p>Configuration \u2192</p> <p>Configuration reference</p> </li> </ul>"},{"location":"architecture/web-ui/","title":"Web UI Architecture","text":"<p>The Databricks DevBox web UI is a modern React application built with TypeScript, Vite, and Tailwind CSS.</p>"},{"location":"architecture/web-ui/#tech-stack","title":"Tech Stack","text":"<ul> <li>Framework: React 18 with TypeScript</li> <li>Build Tool: Vite 6</li> <li>Styling: Tailwind CSS 4 + shadcn/ui components</li> <li>State Management: React Context + hooks</li> <li>HTTP Client: Fetch API</li> <li>WebSocket: Native WebSocket API</li> <li>Icons: Lucide React</li> </ul>"},{"location":"architecture/web-ui/#project-structure","title":"Project Structure","text":"<pre><code>web_ui/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 components/          # Reusable UI components\n\u2502   \u2502   \u251c\u2500\u2500 ui/             # shadcn/ui base components\n\u2502   \u2502   \u251c\u2500\u2500 ServerCard.tsx\n\u2502   \u2502   \u251c\u2500\u2500 CreateServerDialog.tsx\n\u2502   \u2502   \u2514\u2500\u2500 LogViewer.tsx\n\u2502   \u251c\u2500\u2500 lib/\n\u2502   \u2502   \u251c\u2500\u2500 api.ts          # API client functions\n\u2502   \u2502   \u2514\u2500\u2500 utils.ts        # Utility functions\n\u2502   \u251c\u2500\u2500 types/\n\u2502   \u2502   \u2514\u2500\u2500 index.ts        # TypeScript type definitions\n\u2502   \u251c\u2500\u2500 App.tsx             # Main application component\n\u2502   \u251c\u2500\u2500 main.tsx            # Application entry point\n\u2502   \u2514\u2500\u2500 index.css           # Global styles\n\u251c\u2500\u2500 public/\n\u2502   \u2514\u2500\u2500 logo.png\n\u251c\u2500\u2500 vite.config.ts\n\u251c\u2500\u2500 tailwind.config.js\n\u251c\u2500\u2500 tsconfig.json\n\u2514\u2500\u2500 package.json\n</code></pre>"},{"location":"architecture/web-ui/#core-components","title":"Core Components","text":""},{"location":"architecture/web-ui/#1-server-card","title":"1. Server Card","text":"<p>Displays server information and actions.</p> <pre><code>// ServerCard.tsx\ninterface ServerCardProps {\n  server: ServerInstance;\n  onStart: (id: string) =&gt; void;\n  onStop: (id: string) =&gt; void;\n  onRestart: (id: string) =&gt; void;\n  onDelete: (id: string) =&gt; void;\n  onOpen: (port: number) =&gt; void;\n}\n\nexport function ServerCard({ server, ...actions }: ServerCardProps) {\n  return (\n    &lt;Card&gt;\n      &lt;CardHeader&gt;\n        &lt;CardTitle&gt;{server.name}&lt;/CardTitle&gt;\n        &lt;Badge variant={statusVariant(server.status)}&gt;\n          {server.status}\n        &lt;/Badge&gt;\n      &lt;/CardHeader&gt;\n      &lt;CardContent&gt;\n        &lt;p&gt;Port: {server.port}&lt;/p&gt;\n        &lt;p&gt;CPU: {server.cpu_percent?.toFixed(1)}%&lt;/p&gt;\n        &lt;p&gt;Memory: {server.memory_mb?.toFixed(0)} MB&lt;/p&gt;\n        &lt;p&gt;Uptime: {formatUptime(server.uptime)}&lt;/p&gt;\n      &lt;/CardContent&gt;\n      &lt;CardFooter&gt;\n        &lt;Button onClick={() =&gt; actions.onStart(server.id)}&gt;Start&lt;/Button&gt;\n        &lt;Button onClick={() =&gt; actions.onStop(server.id)}&gt;Stop&lt;/Button&gt;\n        &lt;Button onClick={() =&gt; actions.onOpen(server.port)}&gt;Open&lt;/Button&gt;\n      &lt;/CardFooter&gt;\n    &lt;/Card&gt;\n  );\n}\n</code></pre>"},{"location":"architecture/web-ui/#2-create-server-dialog","title":"2. Create Server Dialog","text":"<p>Modal for creating new servers.</p> <pre><code>// CreateServerDialog.tsx\nexport function CreateServerDialog({ open, onClose, onSubmit }) {\n  const [name, setName] = useState(\"\");\n  const [selectedExtensions, setSelectedExtensions] = useState&lt;string[]&gt;([]);\n  const [workspace, setWorkspace] = useState&lt;WorkspaceConfig&gt;({});\n\n  return (\n    &lt;Dialog open={open} onOpenChange={onClose}&gt;\n      &lt;DialogContent&gt;\n        &lt;DialogHeader&gt;\n          &lt;DialogTitle&gt;Create New Server&lt;/DialogTitle&gt;\n        &lt;/DialogHeader&gt;\n\n        &lt;Form onSubmit={handleSubmit}&gt;\n          &lt;Input\n            label=\"Server Name\"\n            value={name}\n            onChange={setName}\n          /&gt;\n\n          &lt;ExtensionGroupSelector\n            groups={extensionGroups}\n            selected={selectedExtensions}\n            onSelect={setSelectedExtensions}\n          /&gt;\n\n          &lt;WorkspaceSelector\n            config={workspace}\n            onChange={setWorkspace}\n          /&gt;\n\n          &lt;Button type=\"submit\"&gt;Create&lt;/Button&gt;\n        &lt;/Form&gt;\n      &lt;/DialogContent&gt;\n    &lt;/Dialog&gt;\n  );\n}\n</code></pre>"},{"location":"architecture/web-ui/#3-log-viewer","title":"3. Log Viewer","text":"<p>Real-time log streaming component.</p> <pre><code>// LogViewer.tsx\nexport function LogViewer({ serverId }: { serverId?: string }) {\n  const [logs, setLogs] = useState&lt;LogEntry[]&gt;([]);\n  const [connected, setConnected] = useState(false);\n  const wsRef = useRef&lt;WebSocket | null&gt;(null);\n\n  useEffect(() =&gt; {\n    // Connect to WebSocket\n    const wsUrl = serverId\n      ? `ws://localhost:8000/ws/logs/${serverId}`\n      : `ws://localhost:8000/ws/logs`;\n\n    const ws = new WebSocket(wsUrl);\n    wsRef.current = ws;\n\n    ws.onopen = () =&gt; setConnected(true);\n    ws.onclose = () =&gt; setConnected(false);\n\n    ws.onmessage = (event) =&gt; {\n      const log = JSON.parse(event.data) as LogEntry;\n      setLogs((prev) =&gt; [...prev, log].slice(-500));  // Keep last 500\n    };\n\n    return () =&gt; ws.close();\n  }, [serverId]);\n\n  return (\n    &lt;div className=\"h-96 overflow-y-auto bg-black text-white font-mono p-4\"&gt;\n      {logs.map((log, i) =&gt; (\n        &lt;LogLine key={i} log={log} /&gt;\n      ))}\n      {connected &amp;&amp; &lt;div className=\"text-green-500\"&gt;\u25cf Connected&lt;/div&gt;}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"architecture/web-ui/#api-client","title":"API Client","text":""},{"location":"architecture/web-ui/#http-api","title":"HTTP API","text":"<pre><code>// lib/api.ts\nconst API_BASE = 'http://localhost:8000';\n\nexport const api = {\n  // Server management\n  async listServers(): Promise&lt;ServerInstance[]&gt; {\n    const res = await fetch(`${API_BASE}/servers`);\n    return res.json();\n  },\n\n  async createServer(data: CreateServerRequest): Promise&lt;ServerInstance&gt; {\n    const res = await fetch(`${API_BASE}/servers`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data),\n    });\n    return res.json();\n  },\n\n  async startServer(id: string): Promise&lt;void&gt; {\n    await fetch(`${API_BASE}/servers/${id}/start`, { method: 'POST' });\n  },\n\n  async stopServer(id: string): Promise&lt;void&gt; {\n    await fetch(`${API_BASE}/servers/${id}/stop`, { method: 'POST' });\n  },\n\n  async deleteServer(id: string): Promise&lt;void&gt; {\n    await fetch(`${API_BASE}/servers/${id}`, { method: 'DELETE' });\n  },\n\n  // Configuration\n  async getConfig(): Promise&lt;DevboxConfig&gt; {\n    const res = await fetch(`${API_BASE}/config`);\n    return res.json();\n  },\n\n  async getTemplates(): Promise&lt;PackagedAssets&gt; {\n    const res = await fetch(`${API_BASE}/templates`);\n    const data = await res.json();\n    return data.data;\n  },\n};\n</code></pre>"},{"location":"architecture/web-ui/#websocket-client","title":"WebSocket Client","text":"<pre><code>// lib/websocket.ts\nexport class LogStreamClient {\n  private ws: WebSocket | null = null;\n\n  connect(serverId?: string) {\n    const url = serverId\n      ? `ws://localhost:8000/ws/logs/${serverId}`\n      : `ws://localhost:8000/ws/logs`;\n\n    this.ws = new WebSocket(url);\n\n    this.ws.onmessage = (event) =&gt; {\n      const log = JSON.parse(event.data);\n      this.onLog(log);\n    };\n\n    this.ws.onerror = (error) =&gt; {\n      console.error('WebSocket error:', error);\n    };\n  }\n\n  disconnect() {\n    this.ws?.close();\n    this.ws = null;\n  }\n\n  onLog(log: LogEntry) {\n    // Override in consumer\n  }\n}\n</code></pre>"},{"location":"architecture/web-ui/#type-definitions","title":"Type Definitions","text":"<pre><code>// types/index.ts\nexport interface ServerInstance {\n  id: string;\n  name: string;\n  port: number;\n  workspace_path: string;\n  extensions: string[];\n  status: 'running' | 'stopped' | 'failed';\n  pid?: number;\n  start_time?: string;\n  command?: string[];\n  uptime?: number;\n  cpu_percent?: number;\n  memory_mb?: number;\n  last_update?: string;\n}\n\nexport interface ExtensionGroup {\n  name: string;\n  description: string;\n  extensions: string[];\n  user_settings?: Record&lt;string, any&gt;;\n}\n\nexport interface DevboxConfig {\n  extension_groups: Record&lt;string, ExtensionGroup&gt;;\n  server: ServerConfig;\n  ui: UIConfig;\n  packaged_assets?: PackagedAssets;\n}\n\nexport interface CreateServerRequest {\n  name: string;\n  extensions?: string[];\n}\n\nexport interface LogEntry {\n  type: 'log';\n  server_id: string;\n  server_name: string;\n  level: 'INFO' | 'WARN' | 'ERROR';\n  source: string;\n  message: string;\n  timestamp: string;\n}\n</code></pre>"},{"location":"architecture/web-ui/#state-management","title":"State Management","text":""},{"location":"architecture/web-ui/#application-state","title":"Application State","text":"<p>Using React Context and hooks:</p> <pre><code>// App.tsx\nexport function App() {\n  const [servers, setServers] = useState&lt;ServerInstance[]&gt;([]);\n  const [config, setConfig] = useState&lt;DevboxConfig | null&gt;(null);\n  const [loading, setLoading] = useState(true);\n\n  // Load initial data\n  useEffect(() =&gt; {\n    Promise.all([\n      api.listServers(),\n      api.getConfig(),\n    ]).then(([servers, config]) =&gt; {\n      setServers(servers);\n      setConfig(config);\n      setLoading(false);\n    });\n  }, []);\n\n  // Auto-refresh servers every 5 seconds\n  useEffect(() =&gt; {\n    const interval = setInterval(async () =&gt; {\n      const updated = await api.listServers();\n      setServers(updated);\n    }, 5000);\n\n    return () =&gt; clearInterval(interval);\n  }, []);\n\n  // ... render UI\n}\n</code></pre>"},{"location":"architecture/web-ui/#styling","title":"Styling","text":""},{"location":"architecture/web-ui/#tailwind-configuration","title":"Tailwind Configuration","text":"<pre><code>// tailwind.config.js\nexport default {\n  darkMode: 'class',\n  content: ['./index.html', './src/**/*.{ts,tsx}'],\n  theme: {\n    extend: {\n      colors: {\n        primary: '#FF3621',  // Databricks orange\n        secondary: '#00A972',\n      },\n    },\n  },\n  plugins: [],\n};\n</code></pre>"},{"location":"architecture/web-ui/#shadcnui-components","title":"shadcn/ui Components","text":"<p>Pre-built, accessible components:</p> <ul> <li><code>Button</code>, <code>Card</code>, <code>Dialog</code></li> <li><code>Input</code>, <code>Select</code>, <code>Checkbox</code></li> <li><code>Badge</code>, <code>Alert</code>, <code>Tabs</code></li> <li><code>Tooltip</code>, <code>Dropdown</code></li> </ul>"},{"location":"architecture/web-ui/#build-deployment","title":"Build &amp; Deployment","text":""},{"location":"architecture/web-ui/#development","title":"Development","text":"<pre><code># Install dependencies\npnpm install\n\n# Start dev server (with HMR)\npnpm dev\n\n# Runs on http://localhost:5173\n</code></pre>"},{"location":"architecture/web-ui/#production","title":"Production","text":"<pre><code># Build for production\npnpm build\n\n# Output: dist/\n# - index.html\n# - assets/*.js\n# - assets/*.css\n</code></pre>"},{"location":"architecture/web-ui/#embedded-in-go-binary","title":"Embedded in Go Binary","text":"<p>The built web UI is embedded in the Go binary:</p> <pre><code>// assets.go\n//go:embed web_ui_dist\nvar webUIFS embed.FS\n\n// In routes.go\nassetsSubFS, _ := fs.Sub(webUIFS, \"web_ui_dist/assets\")\nr.StaticFS(\"/assets\", http.FS(assetsSubFS))\n\n// Serve index.html for client-side routing\nr.NoRoute(func(c *gin.Context) {\n    data, _ := webUIFS.ReadFile(\"web_ui_dist/index.html\")\n    c.Data(http.StatusOK, \"text/html; charset=utf-8\", data)\n})\n</code></pre>"},{"location":"architecture/web-ui/#user-interactions","title":"User Interactions","text":""},{"location":"architecture/web-ui/#creating-a-server","title":"Creating a Server","text":"<pre><code>1. User clicks \"New Server\"\n2. Dialog opens with form\n3. User enters name, selects extensions\n4. User selects workspace source (empty/GitHub/upload)\n5. Submit form\n6. POST /servers\n7. Server created (may take time for extensions)\n8. UI auto-refreshes and shows new server\n</code></pre>"},{"location":"architecture/web-ui/#starting-a-server","title":"Starting a Server","text":"<pre><code>1. User clicks \"Start\" on server card\n2. POST /servers/:id/start\n3. Server status changes to \"running\"\n4. Metrics start updating\n5. \"Open\" button becomes available\n</code></pre>"},{"location":"architecture/web-ui/#opening-code-server","title":"Opening code-server","text":"<pre><code>1. User clicks \"Open\"\n2. Window opens: /vscode/{port}/\n3. Proxy forwards to code-server instance\n4. code-server loads in new tab\n</code></pre>"},{"location":"architecture/web-ui/#viewing-logs","title":"Viewing Logs","text":"<pre><code>1. User navigates to Logs tab\n2. WebSocket connects to /ws/logs\n3. Logs stream in real-time\n4. Auto-scrolls to bottom\n5. Color-coded by level (INFO/WARN/ERROR)\n</code></pre>"},{"location":"architecture/web-ui/#performance-optimizations","title":"Performance Optimizations","text":"<ul> <li>Auto-refresh: 5-second polling for server list</li> <li>WebSocket: Real-time log streaming (no polling)</li> <li>Lazy Loading: Components loaded on-demand</li> <li>Memoization: React.memo for expensive components</li> <li>Virtual Scrolling: For large log lists (future)</li> </ul>"},{"location":"architecture/web-ui/#next-steps","title":"Next Steps","text":"<ul> <li> <p>Configuration \u2192</p> <p>Configuration reference</p> </li> <li> <p>API Reference \u2192</p> <p>Full API documentation</p> </li> </ul>"},{"location":"authentication/databricks-integration/","title":"Databricks Integration","text":"<p>Databricks DevBox integrates with Databricks using the Databricks SDK for Python to handle authentication and token management.</p>"},{"location":"authentication/databricks-integration/#databricks-sdk","title":"Databricks SDK","text":"<p>The app uses <code>databricks.sdk.WorkspaceClient</code> for all Databricks interactions.</p>"},{"location":"authentication/databricks-integration/#authentication","title":"Authentication","text":"<p>When deployed as a Databricks App, the SDK automatically authenticates using:</p> <ul> <li>Service Principal credentials injected by Databricks</li> <li>Unity Catalog integration for token management</li> <li>Workspace context from <code>DATABRICKS_HOST</code> environment variable</li> </ul> <p>Credential Storage</p> <p>Authentication credentials are stored in the following locations:</p> <ul> <li>PAT Token: Stored in <code>~/.claude-code-router/config.json</code></li> <li>Service Principal Credentials: <code>client_id</code> and <code>client_secret</code> stored in <code>~/.databrickscfg</code></li> </ul> <p>Security Note: All users with access to the app share the same service principal. This is expected behavior since these credentials are already available in the app's environment variables. The shared service principal model is appropriate for multi-user Databricks App deployments.</p>"},{"location":"authentication/databricks-integration/#code-reference","title":"Code Reference","text":"<pre><code># app/vibe_code.py:12\nfrom databricks.sdk import WorkspaceClient\n\ndef generate_spn_token(duration_seconds = 3600):\n    w = WorkspaceClient()  # Auto-authenticates in Databricks App context\n    token = w.tokens.create(\n        comment=f\"sdk-{time.time_ns()}\",\n        lifetime_seconds=duration_seconds\n    ).token_value\n    return token\n</code></pre>"},{"location":"authentication/databricks-integration/#environment-variables","title":"Environment Variables","text":"<p>The app relies on Databricks-provided environment variables:</p> <pre><code># Automatically set by Databricks App runtime\nDATABRICKS_HOST=&lt;workspace-url&gt;\nDATABRICKS_CLIENT_ID=&lt;client-id&gt;\nDATABRICKS_CLIENT_SECRET=&lt;client-secret&gt;\n</code></pre>"},{"location":"authentication/databricks-integration/#token-management","title":"Token Management","text":"<p>See Token Management for details on token generation and lifecycle.</p>"},{"location":"authentication/databricks-integration/#next-steps","title":"Next Steps","text":"<ul> <li> <p>Token Management \u2192</p> <p>Token generation and usage</p> </li> <li> <p>Installation \u2192</p> <p>Deploy as Databricks App</p> </li> </ul>"},{"location":"authentication/tokens/","title":"Token Management","text":"<p>Databricks DevBox uses Databricks Personal Access Tokens (PATs) to authenticate with Databricks-hosted AI models for vibe coding assistants.</p>"},{"location":"authentication/tokens/#token-generation","title":"Token Generation","text":"<p>Tokens are automatically generated using the Databricks SDK when the app starts.</p>"},{"location":"authentication/tokens/#how-it-works","title":"How It Works","text":"<pre><code># app/vibe_code.py:11\ndef generate_spn_token(duration_seconds = 3600):\n    w = WorkspaceClient()\n    token_expiry = int(os.environ.get(\"CLAUDE_CODE_TOKEN_EXPIRY_SECONDS\", duration_seconds))\n    token = w.tokens.create(\n        comment=f\"sdk-{time.time_ns()}\",\n        lifetime_seconds=token_expiry\n    ).token_value\n    return token\n</code></pre> <p>Process:</p> <ol> <li><code>WorkspaceClient()</code> authenticates using Databricks App credentials</li> <li>Creates a new token via Databricks API</li> <li>Token has configurable expiry (default: 3600 seconds = 1 hour)</li> <li>Token stored in CCR (Claude Code Router) configuration</li> </ol>"},{"location":"authentication/tokens/#configuration","title":"Configuration","text":"<p>Set token expiry via environment variable:</p> <pre><code># app.yaml\nenv:\n  - name: 'CLAUDE_CODE_TOKEN_EXPIRY_SECONDS'\n    value: '7200'  # 2 hours\n</code></pre>"},{"location":"authentication/tokens/#token-storage","title":"Token Storage","text":"<p>Tokens are stored in the CCR configuration file:</p> <pre><code>~/.claude-code-router/config.json\n</code></pre> <p>Configuration structure:</p> <pre><code>{\n  \"Providers\": [\n    {\n      \"name\": \"databricks\",\n      \"api_base_url\": \"https://&lt;workspace&gt;/serving-endpoints/databricks-claude-sonnet-4/invocations\",\n      \"api_key\": \"&lt;generated-token&gt;\",\n      \"models\": [\"databricks-claude-sonnet-4\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"authentication/tokens/#token-lifecycle","title":"Token Lifecycle","text":"<pre><code>sequenceDiagram\n    participant App as Python App\n    participant SDK as Databricks SDK\n    participant API as Databricks API\n    participant CCR as CCR Config\n\n    App-&gt;&gt;SDK: generate_spn_token()\n    SDK-&gt;&gt;API: tokens.create(lifetime_seconds)\n    API--&gt;&gt;SDK: token_value\n    SDK--&gt;&gt;App: token\n    App-&gt;&gt;CCR: Write config.json\n    Note over CCR: Token expires after lifetime_seconds\n    Note over App: On next restart, new token generated</code></pre>"},{"location":"authentication/tokens/#expiry-handling","title":"Expiry Handling","text":"<ul> <li>Automatic regeneration on app restart</li> <li>No refresh mechanism during runtime (tokens must last for app lifetime)</li> <li>Recommendation: Set expiry longer than expected app uptime</li> </ul>"},{"location":"authentication/tokens/#security","title":"Security","text":""},{"location":"authentication/tokens/#token-permissions","title":"Token Permissions","text":"<p>Generated tokens have:</p> <ul> <li>\u2705 Read access to Databricks workspace</li> <li>\u2705 Model serving endpoint access</li> <li>\u274c No write permissions to workspace data</li> <li>\u274c No admin permissions</li> </ul>"},{"location":"authentication/tokens/#token-isolation","title":"Token Isolation","text":"<ul> <li>Each app deployment generates its own token</li> <li>Tokens are not shared between environments</li> <li>Tokens stored in app filesystem (not version controlled)</li> </ul>"},{"location":"authentication/tokens/#usage","title":"Usage","text":""},{"location":"authentication/tokens/#claude-code","title":"Claude Code","text":"<p>Token is automatically used by Claude Code via CCR proxy:</p> <pre><code># User runs\ncc\n\n# Behind the scenes:\n# 1. Claude Code connects to CCR proxy\n# 2. CCR forwards to Databricks endpoint with token\n# 3. Response routed back to Claude Code\n</code></pre>"},{"location":"authentication/tokens/#manual-token-access","title":"Manual Token Access","text":"<p>For debugging or custom scripts:</p> <pre><code># Read CCR config\ncat ~/.claude-code-router/config.json | jq '.Providers[0].api_key'\n\n# Use token with curl\nTOKEN=$(cat ~/.claude-code-router/config.json | jq -r '.Providers[0].api_key')\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n  https://&lt;workspace&gt;/serving-endpoints/databricks-claude-sonnet-4/invocations\n</code></pre>"},{"location":"authentication/tokens/#troubleshooting","title":"Troubleshooting","text":""},{"location":"authentication/tokens/#token-not-generated","title":"Token Not Generated","text":"<p>Symptoms:</p> <ul> <li>Claude Code fails to connect</li> <li>CCR config missing or empty</li> </ul> <p>Solutions:</p> <ol> <li>Check Unity Catalog is enabled</li> <li>Verify Databricks SDK authentication</li> <li>Check app logs for token generation errors</li> </ol> <pre><code># Check if token was generated\nls -la ~/.claude-code-router/config.json\ncat ~/.claude-code-router/config.json | jq '.Providers'\n</code></pre>"},{"location":"authentication/tokens/#token-expired","title":"Token Expired","text":"<p>Symptoms:</p> <ul> <li>Claude Code works initially, then fails</li> <li>HTTP 401 errors from Databricks endpoint</li> </ul> <p>Solutions:</p> <ol> <li>Restart the app (generates new token)</li> <li>Increase token expiry: <code>CLAUDE_CODE_TOKEN_EXPIRY_SECONDS=86400</code> (24 hours)</li> </ol>"},{"location":"authentication/tokens/#permission-denied","title":"Permission Denied","text":"<p>Symptoms:</p> <ul> <li>Token generation fails</li> <li>\"Insufficient permissions\" error</li> </ul> <p>Solutions:</p> <ol> <li>Ensure app has workspace access</li> <li>Check Unity Catalog permissions</li> <li>Verify Service Principal credentials</li> </ol>"},{"location":"authentication/tokens/#best-practices","title":"Best Practices","text":""},{"location":"authentication/tokens/#1-set-appropriate-expiry","title":"1. Set Appropriate Expiry","text":"<pre><code># For long-running apps (24 hours)\nenv:\n  - name: 'CLAUDE_CODE_TOKEN_EXPIRY_SECONDS'\n    value: '86400'\n\n# For short-lived demos (1 hour)\nenv:\n  - name: 'CLAUDE_CODE_TOKEN_EXPIRY_SECONDS'\n    value: '3600'\n</code></pre>"},{"location":"authentication/tokens/#2-monitor-token-usage","title":"2. Monitor Token Usage","text":"<p>Check CCR logs for token issues:</p> <pre><code>tail -f ~/.claude-code-router/plugin.log\n</code></pre>"},{"location":"authentication/tokens/#3-secure-token-storage","title":"3. Secure Token Storage","text":"<ul> <li>\u274c Never commit config.json to version control</li> <li>\u274c Never share tokens between users</li> <li>\u2705 Generate fresh tokens for each deployment</li> </ul>"},{"location":"authentication/tokens/#next-steps","title":"Next Steps","text":"<ul> <li> <p>Databricks Integration \u2192</p> <p>How SDK authentication works</p> </li> <li> <p>Claude Code Router \u2192</p> <p>CCR configuration details</p> </li> </ul>"},{"location":"code-server/","title":"What is code-server?","text":"<p>code-server is an open-source project that enables you to run VS Code in a browser, providing a full-featured development environment accessible from anywhere.</p>"},{"location":"code-server/#key-differences-from-vs-code-desktop","title":"Key Differences from VS Code Desktop","text":"<p>code-server is NOT VS Code Desktop. It's an open-source fork with important differences:</p> Feature VS Code Desktop code-server Platform Desktop app Web browser Installation Download installer Server installation Extension Marketplace Microsoft Store Open VSX Remote Access Limited Built-in Licensing Microsoft MIT License Telemetry Microsoft Disabled by default"},{"location":"code-server/#why-code-server","title":"Why code-server?","text":""},{"location":"code-server/#1-browser-based","title":"1. Browser-Based","text":"<p>Access your development environment from any device:</p> <ul> <li>\ud83d\udcbb Laptop, desktop, tablet</li> <li>\ud83c\udf10 Any operating system</li> <li>\ud83d\udcf1 Even mobile devices (limited)</li> <li>\u2601\ufe0f No local installation required</li> </ul>"},{"location":"code-server/#2-consistent-environments","title":"2. Consistent Environments","text":"<ul> <li>Same setup across all machines</li> <li>No \"works on my machine\" issues</li> <li>Share environments with team members</li> <li>Quick onboarding for new developers</li> </ul>"},{"location":"code-server/#3-resource-flexibility","title":"3. Resource Flexibility","text":"<ul> <li>Server-side execution: Code runs on server, not local machine</li> <li>Powerful backends: Use cloud VMs with more resources</li> <li>Thin clients: Old laptops can access powerful development environments</li> </ul>"},{"location":"code-server/#4-always-available","title":"4. Always Available","text":"<ul> <li>No setup time: Environment is always running</li> <li>Resume work: Pick up exactly where you left off</li> <li>Persistent state: Terminal sessions, debug sessions remain active</li> </ul>"},{"location":"code-server/#how-it-works","title":"How It Works","text":"<pre><code>graph TB\n    Browser[Web Browser]\n    CS[code-server Process&lt;br/&gt;:8010]\n    FS[File System&lt;br/&gt;Workspace]\n    Term[Integrated Terminal]\n\n    Browser --&gt;|HTTP/WebSocket| CS\n    CS --&gt;|Read/Write| FS\n    CS --&gt;|Execute| Term\n    Term --&gt;|Output| CS\n    CS --&gt;|Stream| Browser</code></pre> <p>Flow:</p> <ol> <li>User accesses <code>http://localhost:8010</code> in browser</li> <li>code-server serves VS Code web UI</li> <li>User edits files in browser</li> <li>code-server writes changes to server filesystem</li> <li>Terminal commands execute on server</li> <li>Output streams back to browser</li> </ol>"},{"location":"code-server/#open-vsx-vs-microsoft-marketplace","title":"Open VSX vs Microsoft Marketplace","text":""},{"location":"code-server/#microsoft-marketplace","title":"Microsoft Marketplace","text":"<ul> <li>\u274c Not available in code-server</li> <li>\u274c Proprietary to Microsoft VS Code</li> <li>\u274c Licensing restrictions prevent use in forks</li> </ul>"},{"location":"code-server/#open-vsx-registry","title":"Open VSX Registry","text":"<ul> <li>\u2705 Open source extension registry</li> <li>\u2705 Available to all VS Code forks</li> <li>\u2705 Most popular extensions available</li> <li>\u26a0\ufe0f Some Microsoft extensions not available</li> </ul> <p>Missing Extensions:</p> <ul> <li>Microsoft Python Extension (alternatives available)</li> <li>Live Share (planned support)</li> <li>Some proprietary Microsoft tools</li> </ul> <p>Workarounds:</p> <ul> <li>Use open-source alternatives</li> <li>Manually install compatible <code>.vsix</code> files</li> <li>Use Databricks DevBox pre-configured extension groups</li> </ul> <p>Learn more about extensions \u2192</p>"},{"location":"code-server/#architecture-in-databricks-devbox","title":"Architecture in Databricks DevBox","text":"<p>Databricks DevBox runs multiple code-server instances:</p> <pre><code>DevBox Manager (:8000)\n\u251c\u2500\u2500 code-server instance 1 (:8010)\n\u251c\u2500\u2500 code-server instance 2 (:8011)\n\u2514\u2500\u2500 code-server instance N (:8099)\n</code></pre> <p>Each instance:</p> <ul> <li>Runs as separate process</li> <li>Has isolated workspace directory</li> <li>Uses dedicated configuration</li> <li>Runs on unique port</li> </ul> <p>Learn more about architecture \u2192</p>"},{"location":"code-server/#command-line-options","title":"Command Line Options","text":"<p>Databricks DevBox starts code-server with:</p> <pre><code>code-server \\\n  --bind-addr 0.0.0.0:8010 \\\n  --user-data-dir /path/to/data/&lt;server-id&gt;/code-server \\\n  --auth none \\\n  --disable-telemetry \\\n  --disable-update-check \\\n  --disable-file-downloads \\\n  --log info \\\n  /path/to/workspace\n</code></pre> <p>Options explained:</p> <ul> <li><code>--bind-addr</code>: Listen on all interfaces, specific port</li> <li><code>--user-data-dir</code>: Isolated configuration directory</li> <li><code>--auth none</code>: No password (protected by DevBox)</li> <li><code>--disable-telemetry</code>: No usage tracking</li> <li><code>--disable-update-check</code>: Prevent automatic updates</li> <li><code>--disable-file-downloads</code>: Security hardening</li> <li><code>--log info</code>: Logging level</li> </ul>"},{"location":"code-server/#environment-variables","title":"Environment Variables","text":"<p>code-server instances run with:</p> <pre><code>XDG_DATA_HOME=/path/to/data/&lt;server-id&gt;\nNODE_OPTIONS=--max-old-space-size=2048\nVSCODE_LOGS=info\nCODE_SERVER_LOG=info\nUV_THREADPOOL_SIZE=128\nNODE_TLS_REJECT_UNAUTHORIZED=0\nVSCODE_DISABLE_CRASH_REPORTER=true\nELECTRON_NO_ATTACH_CONSOLE=1\nDISABLE_TELEMETRY=true\n</code></pre> <p>View code \u2192</p>"},{"location":"code-server/#comparison-with-alternatives","title":"Comparison with Alternatives","text":"Feature code-server Gitpod GitHub Codespaces Self-hosted \u2705 Yes \u26a0\ufe0f Limited \u274c No Cost Free Paid Paid Customization \u2705 Full \u26a0\ufe0f Limited \u26a0\ufe0f Limited Databricks Integration \u2705 Yes (via DevBox) \u274c No \u274c No Open Source \u2705 Yes \u26a0\ufe0f Partial \u274c No"},{"location":"code-server/#benefits-in-databricks-context","title":"Benefits in Databricks Context","text":""},{"location":"code-server/#1-lakehouse-integration","title":"1. Lakehouse Integration","text":"<ul> <li>Access Databricks workspace files</li> <li>Run Databricks CLI commands</li> <li>Use Databricks extensions</li> <li>Query Unity Catalog</li> </ul>"},{"location":"code-server/#2-training-workshops","title":"2. Training &amp; Workshops","text":"<ul> <li>Pre-configured environments for students</li> <li>Consistent setup across all participants</li> <li>No installation required</li> <li>Quick teardown after session</li> </ul>"},{"location":"code-server/#3-ai-assisted-development","title":"3. AI-Assisted Development","text":"<ul> <li>Claude Code pre-installed and configured</li> <li>Databricks models via CCR</li> <li>Token management handled automatically</li> </ul>"},{"location":"code-server/#4-team-collaboration","title":"4. Team Collaboration","text":"<ul> <li>Shared templates for common projects</li> <li>Consistent tooling across team</li> <li>Easy environment reproduction</li> </ul>"},{"location":"code-server/#limitations","title":"Limitations","text":""},{"location":"code-server/#1-not-identical-to-vs-code","title":"1. Not Identical to VS Code","text":"<ul> <li>Some keyboard shortcuts differ</li> <li>Performance may vary</li> <li>Browser limitations apply</li> </ul>"},{"location":"code-server/#2-extension-availability","title":"2. Extension Availability","text":"<ul> <li>Not all extensions available on Open VSX</li> <li>Microsoft-proprietary extensions unavailable</li> <li>Some extensions may have compatibility issues</li> </ul>"},{"location":"code-server/#3-network-dependency","title":"3. Network Dependency","text":"<ul> <li>Requires connection to server</li> <li>Latency affects responsiveness</li> <li>Offline work not possible</li> </ul>"},{"location":"code-server/#4-browser-constraints","title":"4. Browser Constraints","text":"<ul> <li>Browser resource limits</li> <li>Tab closure loses state</li> <li>Browser-specific quirks</li> </ul>"},{"location":"code-server/#best-practices","title":"Best Practices","text":""},{"location":"code-server/#1-use-modern-browsers","title":"1. Use Modern Browsers","text":"<ul> <li>\u2705 Chrome/Chromium</li> <li>\u2705 Firefox</li> <li>\u2705 Edge</li> <li>\u26a0\ufe0f Safari (some issues)</li> </ul>"},{"location":"code-server/#2-stable-connections","title":"2. Stable Connections","text":"<ul> <li>Prefer wired connections</li> <li>Use stable WiFi</li> <li>Avoid mobile hotspots for intensive work</li> </ul>"},{"location":"code-server/#3-regular-saves","title":"3. Regular Saves","text":"<ul> <li>Enable auto-save</li> <li>Commit frequently</li> <li>Use version control</li> </ul>"},{"location":"code-server/#4-resource-management","title":"4. Resource Management","text":"<ul> <li>Close unused terminals</li> <li>Limit concurrent processes</li> <li>Monitor memory usage</li> </ul>"},{"location":"code-server/#next-steps","title":"Next Steps","text":"<ul> <li> <p>VS Code Differences \u2192</p> <p>Detailed comparison</p> </li> <li> <p>Extension Marketplace \u2192</p> <p>Open VSX vs Microsoft Store</p> </li> <li> <p>Architecture \u2192</p> <p>How DevBox manages code-server</p> </li> </ul>"},{"location":"code-server/extension-marketplace/","title":"Extension Marketplace","text":"<p>code-server uses Open VSX instead of the Microsoft Extension Marketplace.</p>"},{"location":"code-server/extension-marketplace/#open-vsx-registry","title":"Open VSX Registry","text":"<p>Open VSX is an open-source alternative to the Microsoft Extension Marketplace.</p>"},{"location":"code-server/extension-marketplace/#why-not-microsoft-marketplace","title":"Why Not Microsoft Marketplace?","text":"<p>Microsoft's extension marketplace is proprietary and licensed exclusively to Microsoft VS Code. Open-source forks like code-server cannot use it due to licensing restrictions.</p>"},{"location":"code-server/extension-marketplace/#whats-available","title":"What's Available","text":"<p>Most popular extensions ARE available:</p> <ul> <li>\u2705 Python support (pyright, pylance alternatives)</li> <li>\u2705 Jupyter notebooks</li> <li>\u2705 Databricks</li> <li>\u2705 Git tools</li> <li>\u2705 Themes and icons</li> <li>\u2705 Language servers (TypeScript, Go, Rust, etc.)</li> <li>\u2705 Code formatters (Prettier, Black, etc.)</li> <li>\u2705 Linters (ESLint, Pylint, etc.)</li> </ul> <p>Some Microsoft-proprietary extensions are NOT available:</p> <ul> <li>\u274c ms-python.python (use alternatives)</li> <li>\u274c C/C++ IntelliSense</li> <li>\u274c Live Share</li> <li>\u274c Remote Development extensions</li> </ul>"},{"location":"code-server/extension-marketplace/#finding-extensions","title":"Finding Extensions","text":"<p>Search Open VSX:</p> <ol> <li>Visit https://open-vsx.org/</li> <li>Search for extension</li> <li>Note the extension ID (e.g., <code>ms-pyright.pyright</code>)</li> </ol> <p>In code-server:</p> <ol> <li>Click Extensions icon (Ctrl+Shift+X)</li> <li>Search for extension</li> <li>Click Install</li> </ol>"},{"location":"code-server/extension-marketplace/#pre-configured-extensions","title":"Pre-configured Extensions","text":"<p>Databricks DevBox includes pre-configured extension groups:</p>"},{"location":"code-server/extension-marketplace/#python-group","title":"Python Group","text":"<pre><code>python:\n  extensions:\n    - \"ms-python.python\"       # Python language support\n    - \"ms-pyright.pyright\"     # Type checking\n  user_settings:\n    \"python.languageServer\": \"None\"\n</code></pre>"},{"location":"code-server/extension-marketplace/#jupyter-group","title":"Jupyter Group","text":"<pre><code>jupyter:\n  extensions:\n    - \"ms-toolsai.jupyter\"\n    - \"ms-toolsai.jupyter-renderers\"\n    - \"ms-toolsai.jupyter-keymap\"\n</code></pre>"},{"location":"code-server/extension-marketplace/#databricks-group","title":"Databricks Group","text":"<pre><code>databricks:\n  extensions:\n    - \"databricks.databricks\"\n    - \"databricks.sqltools-databricks-driver\"\n</code></pre> <p>View full configuration \u2192</p>"},{"location":"code-server/extension-marketplace/#manual-installation","title":"Manual Installation","text":""},{"location":"code-server/extension-marketplace/#from-open-vsx","title":"From Open VSX","text":"<pre><code># In code-server terminal\ncode-server --install-extension &lt;publisher&gt;.&lt;extension&gt;\n\n# Example:\ncode-server --install-extension ms-pyright.pyright\n</code></pre>"},{"location":"code-server/extension-marketplace/#from-vsix-file","title":"From .vsix File","text":"<pre><code># Download .vsix file\n# Install via command line\ncode-server --install-extension /path/to/extension.vsix\n</code></pre>"},{"location":"code-server/extension-marketplace/#common-extensions","title":"Common Extensions","text":""},{"location":"code-server/extension-marketplace/#python-development","title":"Python Development","text":"Extension ID Description Pyright <code>ms-pyright.pyright</code> Type checking Python <code>ms-python.python</code> Language support Pylance <code>ms-python.vscode-pylance</code> Advanced IntelliSense"},{"location":"code-server/extension-marketplace/#data-science","title":"Data Science","text":"Extension ID Description Jupyter <code>ms-toolsai.jupyter</code> Notebook support Jupyter Renderers <code>ms-toolsai.jupyter-renderers</code> Output rendering"},{"location":"code-server/extension-marketplace/#databricks","title":"Databricks","text":"Extension ID Description Databricks <code>databricks.databricks</code> Databricks integration SQL Tools <code>databricks.sqltools-databricks-driver</code> SQL support"},{"location":"code-server/extension-marketplace/#general-development","title":"General Development","text":"Extension ID Description GitLens <code>eamodio.gitlens</code> Git superpowers Prettier <code>esbenp.prettier-vscode</code> Code formatter ESLint <code>dbaeumer.vscode-eslint</code> JavaScript linting"},{"location":"code-server/extension-marketplace/#troubleshooting","title":"Troubleshooting","text":""},{"location":"code-server/extension-marketplace/#extension-not-found","title":"Extension Not Found","text":"<p>Solution:</p> <ol> <li>Check Open VSX</li> <li>Try alternative extensions</li> <li>Manually install .vsix file</li> </ol>"},{"location":"code-server/extension-marketplace/#extension-wont-install","title":"Extension Won't Install","text":"<p>Check logs:</p> <pre><code># View code-server logs\ntail -f ~/.local/share/code-server/logs/&lt;date&gt;/vscode.log\n</code></pre> <p>Common issues:</p> <ul> <li>Network connectivity</li> <li>Incompatible version</li> <li>Missing dependencies</li> </ul>"},{"location":"code-server/extension-marketplace/#extension-not-working","title":"Extension Not Working","text":"<p>Possible causes:</p> <ul> <li>Platform incompatibility (some extensions Windows/Mac only)</li> <li>Missing native dependencies</li> <li>Configuration issues</li> </ul> <p>Solutions:</p> <ul> <li>Check extension requirements</li> <li>Review extension logs</li> <li>Try alternative extension</li> </ul>"},{"location":"code-server/extension-marketplace/#best-practices","title":"Best Practices","text":""},{"location":"code-server/extension-marketplace/#1-use-extension-groups","title":"1. Use Extension Groups","text":"<p>Pre-configured groups ensure consistency:</p> <pre><code># In devbox.yaml\nextension_groups:\n  my-stack:\n    name: \"My Stack\"\n    extensions:\n      - \"ms-python.python\"\n      - \"ms-toolsai.jupyter\"\n      - \"databricks.databricks\"\n</code></pre>"},{"location":"code-server/extension-marketplace/#2-pin-extension-versions","title":"2. Pin Extension Versions","text":"<p>For production environments:</p> <pre><code># Install specific version\ncode-server --install-extension publisher.extension@1.2.3\n</code></pre>"},{"location":"code-server/extension-marketplace/#3-test-extensions","title":"3. Test Extensions","text":"<p>Test in development before deploying to production.</p>"},{"location":"code-server/extension-marketplace/#next-steps","title":"Next Steps","text":"<ul> <li> <p>What is code-server? \u2192</p> <p>Overview</p> </li> <li> <p>VS Code Differences \u2192</p> <p>Detailed comparison</p> </li> </ul>"},{"location":"code-server/vs-code-differences/","title":"Differences from VS Code","text":"<p>Understanding the key differences between code-server and VS Code Desktop.</p>"},{"location":"code-server/vs-code-differences/#platform-differences","title":"Platform Differences","text":""},{"location":"code-server/vs-code-differences/#vs-code-desktop","title":"VS Code Desktop","text":"<ul> <li>Native application (Electron-based)</li> <li>Runs locally on your machine</li> <li>Direct filesystem access</li> <li>Native OS integration</li> </ul>"},{"location":"code-server/vs-code-differences/#code-server","title":"code-server","text":"<ul> <li>Web application (runs in browser)</li> <li>Runs remotely on a server</li> <li>HTTP-based filesystem access</li> <li>Browser sandbox limitations</li> </ul>"},{"location":"code-server/vs-code-differences/#extension-marketplace","title":"Extension Marketplace","text":"<p>The most significant difference:</p> VS Code Desktop code-server Marketplace Microsoft Store Open VSX Extensions ~50,000+ ~30,000+ Microsoft Extensions \u2705 Available \u274c Not available Open Source Extensions \u2705 Available \u2705 Available <p>Missing extensions:</p> <ul> <li>ms-python.python (Microsoft Python)</li> <li>ms-vscode.cpptools (C/C++)</li> <li>ms-vscode-remote.* (Remote development)</li> </ul> <p>Workarounds:</p> <ul> <li>Use open-source alternatives (pyright instead of python)</li> <li>Manually install <code>.vsix</code> files</li> <li>Use community forks</li> </ul> <p>Extension marketplace details \u2192</p>"},{"location":"code-server/vs-code-differences/#performance","title":"Performance","text":""},{"location":"code-server/vs-code-differences/#local-execution-vs-code-desktop","title":"Local Execution (VS Code Desktop)","text":"<ul> <li>\u2705 Fast: Direct CPU/memory access</li> <li>\u2705 Responsive: No network latency</li> <li>\u274c Resource limited: By local machine</li> </ul>"},{"location":"code-server/vs-code-differences/#remote-execution-code-server","title":"Remote Execution (code-server)","text":"<ul> <li>\u26a0\ufe0f Latency: Network round-trip</li> <li>\u2705 Scalable: Use powerful servers</li> <li>\u2705 Resource flexible: Upgrade server resources</li> </ul>"},{"location":"code-server/vs-code-differences/#feature-availability","title":"Feature Availability","text":""},{"location":"code-server/vs-code-differences/#available-in-both","title":"Available in Both","text":"<ul> <li>\u2705 IntelliSense and code completion</li> <li>\u2705 Integrated terminal</li> <li>\u2705 Git integration</li> <li>\u2705 Debugging (most languages)</li> <li>\u2705 Extensions (Open VSX)</li> <li>\u2705 Settings sync</li> <li>\u2705 Themes and keybindings</li> </ul>"},{"location":"code-server/vs-code-differences/#vs-code-desktop-only","title":"VS Code Desktop Only","text":"<ul> <li>\u274c Microsoft Store extensions</li> <li>\u274c Native file system performance</li> <li>\u274c Direct hardware access</li> <li>\u274c Offline usage</li> </ul>"},{"location":"code-server/vs-code-differences/#code-server-only","title":"code-server Only","text":"<ul> <li>\u2705 Browser-based access</li> <li>\u2705 Multiple simultaneous users (different instances)</li> <li>\u2705 Server-side execution</li> <li>\u2705 No local installation needed</li> </ul>"},{"location":"code-server/vs-code-differences/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<p>Some shortcuts differ due to browser limitations:</p> Action VS Code Desktop code-server (Browser) Command Palette <code>Ctrl+Shift+P</code> <code>Ctrl+Shift+P</code> \u2705 Quick Open <code>Ctrl+P</code> <code>Ctrl+P</code> \u2705 Toggle Terminal <code>Ctrl+\\`` |</code>Ctrl+`` \u2705 New Tab <code>Ctrl+N</code> Browser intercepts \u26a0\ufe0f Close Tab <code>Ctrl+W</code> Browser intercepts \u26a0\ufe0f Reload Window <code>Ctrl+R</code> Browser intercepts \u26a0\ufe0f <p>Workarounds:</p> <ul> <li>Use Command Palette for conflicting shortcuts</li> <li>Configure custom keybindings</li> <li>Use browser-specific modes</li> </ul>"},{"location":"code-server/vs-code-differences/#file-system","title":"File System","text":""},{"location":"code-server/vs-code-differences/#vs-code-desktop_1","title":"VS Code Desktop","text":"<pre><code>Direct access to:\n/home/user/projects/\n\u2514\u2500\u2500 my-project/\n    \u2514\u2500\u2500 file.py\n</code></pre>"},{"location":"code-server/vs-code-differences/#code-server_1","title":"code-server","text":"<pre><code>HTTP-based access to:\n/workspace/&lt;server-id&gt;/\n\u2514\u2500\u2500 my-project/\n    \u2514\u2500\u2500 file.py\n</code></pre> <p>Implications:</p> <ul> <li>Slower file operations (network overhead)</li> <li>No direct OS file picker</li> <li>Browser upload/download for files</li> </ul>"},{"location":"code-server/vs-code-differences/#debugging","title":"Debugging","text":""},{"location":"code-server/vs-code-differences/#similar-experience","title":"Similar Experience","text":"<ul> <li>\u2705 Breakpoints work</li> <li>\u2705 Variable inspection works</li> <li>\u2705 Debug console available</li> <li>\u2705 Most debuggers supported</li> </ul>"},{"location":"code-server/vs-code-differences/#limitations","title":"Limitations","text":"<ul> <li>\u26a0\ufe0f Some native debuggers unavailable</li> <li>\u26a0\ufe0f Performance overhead from network</li> <li>\u26a0\ufe0f Browser memory limits apply</li> </ul>"},{"location":"code-server/vs-code-differences/#terminal","title":"Terminal","text":""},{"location":"code-server/vs-code-differences/#vs-code-desktop_2","title":"VS Code Desktop","text":"<ul> <li>Direct shell access</li> <li>Native OS integration</li> <li>Full terminal capabilities</li> </ul>"},{"location":"code-server/vs-code-differences/#code-server_2","title":"code-server","text":"<ul> <li>Server-side shell (not local)</li> <li>Commands run on server</li> <li>Network latency affects responsiveness</li> </ul> <p>Example:</p> <pre><code># In code-server terminal, this runs on server:\nls /\n# Shows server filesystem, not local filesystem\n</code></pre>"},{"location":"code-server/vs-code-differences/#settings-sync","title":"Settings Sync","text":"<p>Both support settings sync, but differently:</p>"},{"location":"code-server/vs-code-differences/#vs-code-desktop_3","title":"VS Code Desktop","text":"<ul> <li>Syncs via Microsoft account</li> <li>Includes extensions from Microsoft Store</li> </ul>"},{"location":"code-server/vs-code-differences/#code-server_3","title":"code-server","text":"<ul> <li>Syncs via Settings Sync extension</li> <li>Only includes Open VSX extensions</li> </ul>"},{"location":"code-server/vs-code-differences/#updates","title":"Updates","text":""},{"location":"code-server/vs-code-differences/#vs-code-desktop_4","title":"VS Code Desktop","text":"<ul> <li>Auto-updates via Microsoft</li> <li>Monthly release cycle</li> <li>Automatic download and install</li> </ul>"},{"location":"code-server/vs-code-differences/#code-server_4","title":"code-server","text":"<ul> <li>Manual updates</li> <li>Independent release cycle</li> <li>Server admin must update</li> </ul>"},{"location":"code-server/vs-code-differences/#recommendations","title":"Recommendations","text":""},{"location":"code-server/vs-code-differences/#use-vs-code-desktop-when","title":"Use VS Code Desktop When:","text":"<ul> <li>\u2705 Offline work required</li> <li>\u2705 Microsoft extensions needed</li> <li>\u2705 Maximum performance required</li> <li>\u2705 Native OS integration important</li> </ul>"},{"location":"code-server/vs-code-differences/#use-code-server-when","title":"Use code-server When:","text":"<ul> <li>\u2705 Remote access needed</li> <li>\u2705 Consistent environments required</li> <li>\u2705 Multiple machines used</li> <li>\u2705 Team collaboration desired</li> <li>\u2705 Databricks integration needed (via DevBox)</li> </ul>"},{"location":"code-server/vs-code-differences/#next-steps","title":"Next Steps","text":"<ul> <li> <p>Extension Marketplace \u2192</p> <p>Open VSX details</p> </li> <li> <p>What is code-server? \u2192</p> <p>Overview</p> </li> </ul>"},{"location":"coding-assistants/","title":"Vibe Coding Assistants","text":"<p>Databricks DevBox comes with built-in support for multiple AI-powered coding assistants, collectively known as \"vibe coding tools\".</p>"},{"location":"coding-assistants/#overview","title":"Overview","text":"<p>When deployed as a Databricks App, the following tools are automatically installed and configured:</p> Tool Description Command Claude Code Anthropic's AI coding assistant <code>claude</code> Claude Code with Databricks Hosted Sonnet Claude Code via CCR proxy for Databricks-hosted models <code>cc</code> OpenAI Codex GitHub Copilot-style completion <code>codex</code> Google Gemini Google's generative AI CLI <code>gemini</code>"},{"location":"coding-assistants/#tool-specific-documentation","title":"Tool-Specific Documentation","text":"<ul> <li> <p>Claude Code \u2192</p> <p>Anthropic's AI coding assistant CLI</p> </li> <li> <p>Claude Code with Databricks Hosted Sonnet \u2192</p> <p>Claude Code CLI via CCR proxy</p> </li> <li> <p>OpenAI Codex \u2192</p> <p>Code completion CLI tool</p> </li> <li> <p>Google Gemini \u2192</p> <p>Google's AI assistant CLI</p> </li> </ul>"},{"location":"coding-assistants/claude-code-router/","title":"Claude Code with Databricks Hosted Sonnet","text":"<p>Claude Code Router (CCR) is a proxy server that routes AI coding assistant requests to Databricks-hosted Claude models.</p>"},{"location":"coding-assistants/claude-code-router/#overview","title":"Overview","text":"<p>CCR acts as a transparent proxy between Claude Code and Databricks-hosted Sonnet 4, enabling you to use Claude Code with Databricks-hosted models without requiring an Anthropic API subscription.</p>"},{"location":"coding-assistants/claude-code-router/#key-features","title":"Key Features","text":"<ul> <li>\u2705 Request transformation: Converts OpenAI format \u2192 Databricks format</li> <li>\u2705 Response transformation: Converts Databricks format \u2192 OpenAI format</li> <li>\u2705 Token management: Injects Databricks authentication tokens</li> <li>\u2705 Provider routing: Routes to correct model endpoint</li> <li>\u2705 Automatic configuration: Pre-configured in Databricks Devbox</li> </ul>"},{"location":"coding-assistants/claude-code-router/#using-claude-code-with-databricks-managed-claude-models","title":"Using Claude Code with Databricks Managed Claude Models","text":""},{"location":"coding-assistants/claude-code-router/#what-you-get","title":"What You Get","text":"<p>When using Claude Code with CCR (Databricks-hosted):</p> <ul> <li>\u2705 No Anthropic subscription required - Uses Databricks workspace authentication</li> <li>\u2705 Automatic installation - Pre-configured when Databricks Devbox starts</li> <li>\u2705 Pre-authenticated - Authentication is automatic when the Lakehouse App starts</li> <li>\u2705 Transparent proxy - Claude Code works without code changes</li> </ul>"},{"location":"coding-assistants/claude-code-router/#limitations","title":"Limitations","text":"<ul> <li>\u274c No extended thinking support - Keywords like <code>ultrathink</code>, <code>think</code>, and other thinking mode features are not available</li> <li>\u274c Limited model options - Only <code>databricks-claude-sonnet-4</code> is available</li> <li>\u26a0\ufe0f Databricks-specific - Requires Databricks workspace with Claude model serving</li> </ul>"},{"location":"coding-assistants/claude-code-router/#model-details","title":"Model Details","text":"<ul> <li>Model: <code>databricks-claude-sonnet-4</code></li> <li>Endpoint: Databricks Model Serving</li> <li>Version: Claude Sonnet 4</li> <li>Context: 200K tokens</li> </ul>"},{"location":"coding-assistants/claude-code-router/#usage","title":"Usage","text":"<pre><code># Run Claude Code (automatically uses CCR)\ncc\n</code></pre> <p>Claude Code will automatically connect to CCR on <code>localhost:3456</code> and route requests to Databricks.</p>"},{"location":"coding-assistants/claude-code-router/#architecture","title":"Architecture","text":"<pre><code>graph LR\n    CC[Claude Code] --&gt;|OpenAI format| CCR[CCR :3456]\n    CCR --&gt;|Transform| T[Databricks Transformer]\n    T --&gt;|Databricks format| DB[Databricks-hosted Sonnet 4]\n    DB --&gt;|Response| T\n    T --&gt;|OpenAI format| CCR\n    CCR --&gt;|Response| CC</code></pre>"},{"location":"coding-assistants/claude-code-router/#advanced","title":"Advanced","text":""},{"location":"coding-assistants/claude-code-router/#configuration-file","title":"Configuration File","text":"<p>Location: <code>~/.claude-code-router/config.json</code></p> <p>Generated by <code>app/vibe_code.py:18-75</code>:</p> <pre><code>{\n  \"LOG\": false,\n  \"LOG_LEVEL\": \"debug\",\n  \"CLAUDE_PATH\": \"\",\n  \"HOST\": \"127.0.0.1\",\n  \"PORT\": 3456,\n  \"APIKEY\": \"\",\n  \"API_TIMEOUT_MS\": \"600000\",\n  \"PROXY_URL\": \"\",\n  \"transformers\": [\n    {\n      \"path\": \"/path/to/.claude-code-router/plugins/databricks-claude-transformers.js\",\n      \"options\": {\n        \"debug\": false\n      }\n    }\n  ],\n  \"Providers\": [\n    {\n      \"name\": \"databricks\",\n      \"api_base_url\": \"https://&lt;workspace&gt;/serving-endpoints/databricks-claude-sonnet-4/invocations\",\n      \"api_key\": \"&lt;generated-token&gt;\",\n      \"models\": [\"databricks-claude-sonnet-4\"],\n      \"transformer\": {\n        \"use\": [\"OpenAI\", \"databricks-custom\"],\n        \"databricks-claude-sonnet-4\": {\n          \"use\": [\"OpenAI\", \"databricks-custom\"]\n        }\n      }\n    }\n  ],\n  \"StatusLine\": {\n    \"enabled\": false,\n    \"currentStyle\": \"default\",\n    \"default\": { \"modules\": [] },\n    \"powerline\": { \"modules\": [] }\n  },\n  \"Router\": {\n    \"default\": \"databricks,databricks-claude-sonnet-4\"\n  }\n}\n</code></pre>"},{"location":"coding-assistants/claude-code-router/#key-configuration-options","title":"Key Configuration Options","text":"Option Description Default <code>HOST</code> CCR bind address <code>127.0.0.1</code> <code>PORT</code> CCR listen port <code>3456</code> <code>API_TIMEOUT_MS</code> Request timeout <code>600000</code> (10 min) <code>Providers[].name</code> Provider identifier <code>databricks</code> <code>Providers[].api_base_url</code> Model endpoint Databricks URL <code>Providers[].api_key</code> Auth token Generated <code>Router.default</code> Default routing <code>databricks,databricks-claude-sonnet-4</code>"},{"location":"coding-assistants/claude-code-router/#databricks-transformer","title":"Databricks Transformer","text":"<p>Custom transformer for Databricks API compatibility.</p>"},{"location":"coding-assistants/claude-code-router/#transformer-code","title":"Transformer Code","text":"<p>Location: <code>~/.claude-code-router/plugins/databricks-claude-transformers.js</code></p> <p>Key transformations:</p> <ol> <li>Empty content handling: Convert <code>content: \"\"</code> \u2192 <code>content: null</code></li> <li>Cache control removal: Strip <code>cache_control</code> from messages</li> <li>Image URL fixing: Add base64 prefix to image URLs</li> <li>Parallel tool calls: Remove unsupported <code>parallel_tool_calls</code> field</li> </ol> <p>View transformer code \u2192</p>"},{"location":"coding-assistants/claude-code-router/#transformation-example","title":"Transformation Example","text":"<p>Input (OpenAI format):</p> <pre><code>{\n  \"model\": \"gpt-4\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\"type\": \"text\", \"text\": \"Hello\", \"cache_control\": {\"type\": \"ephemeral\"}}\n      ]\n    }\n  ],\n  \"parallel_tool_calls\": true\n}\n</code></pre> <p>Output (Databricks format):</p> <pre><code>{\n  \"model\": \"databricks-claude-sonnet-4\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\"type\": \"text\", \"text\": \"Hello\"}\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"coding-assistants/claude-code-router/#commands","title":"Commands","text":""},{"location":"coding-assistants/claude-code-router/#start-ccr","title":"Start CCR","text":"<pre><code># CCR is auto-started during app initialization\n# Manual start:\nccr start\n</code></pre>"},{"location":"coding-assistants/claude-code-router/#stop-ccr","title":"Stop CCR","text":"<pre><code>ccr stop\n</code></pre>"},{"location":"coding-assistants/claude-code-router/#restart-ccr","title":"Restart CCR","text":"<pre><code>ccr restart\n</code></pre>"},{"location":"coding-assistants/claude-code-router/#check-status","title":"Check Status","text":"<pre><code>ccr status\n</code></pre>"},{"location":"coding-assistants/claude-code-router/#view-logs","title":"View Logs","text":"<pre><code># Enable debug logging\ntail -f ~/.claude-code-router/plugin.log\n</code></pre>"},{"location":"coding-assistants/claude-code-router/#how-it-works","title":"How It Works","text":""},{"location":"coding-assistants/claude-code-router/#request-flow","title":"Request Flow","text":"<pre><code>sequenceDiagram\n    participant CC as Claude Code\n    participant CCR as CCR Server\n    participant Transformer\n    participant DB as Databricks\n\n    CC-&gt;&gt;CCR: POST /v1/chat/completions\n    Note over CCR: Parse request\n    CCR-&gt;&gt;Transformer: transformRequestIn()\n    Note over Transformer: Remove cache_control&lt;br/&gt;Fix empty content&lt;br/&gt;Remove parallel_tool_calls\n    Transformer-&gt;&gt;DB: POST /invocations\n    DB--&gt;&gt;Transformer: Databricks response\n    Transformer-&gt;&gt;CCR: transformResponseOut()\n    CCR--&gt;&gt;CC: OpenAI-compatible response</code></pre>"},{"location":"coding-assistants/claude-code-router/#key-operations","title":"Key Operations","text":"<ol> <li>Request Interception: CCR listens on <code>localhost:3456</code></li> <li>Provider Selection: Routes to Databricks provider</li> <li>Transformation: Applies custom Databricks transformer</li> <li>API Call: Makes request to Databricks-hosted Sonnet 4 with token</li> <li>Response Transformation: Converts response back to OpenAI format</li> <li>Return: Sends to Claude Code</li> </ol>"},{"location":"coding-assistants/claude-code-router/#debugging","title":"Debugging","text":""},{"location":"coding-assistants/claude-code-router/#enable-debug-logging","title":"Enable Debug Logging","text":"<p>Update config.json:</p> <pre><code>{\n  \"LOG\": true,\n  \"LOG_LEVEL\": \"debug\",\n  \"transformers\": [\n    {\n      \"path\": \"...\",\n      \"options\": {\n        \"debug\": true\n      }\n    }\n  ]\n}\n</code></pre> <p>Restart CCR:</p> <pre><code>ccr restart\n</code></pre> <p>View logs:</p> <pre><code>tail -f ~/.claude-code-router/plugin.log\n</code></pre>"},{"location":"coding-assistants/claude-code-router/#common-issues","title":"Common Issues","text":""},{"location":"coding-assistants/claude-code-router/#ccr-not-running","title":"CCR Not Running","text":"<pre><code># Check status\nccr status\n\n# Start if needed\nccr start\n</code></pre>"},{"location":"coding-assistants/claude-code-router/#port-already-in-use","title":"Port Already in Use","text":"<pre><code># Find process using port 3456\nlsof -i :3456\n\n# Kill process\nkill -9 &lt;PID&gt;\n\n# Restart CCR\nccr restart\n</code></pre>"},{"location":"coding-assistants/claude-code-router/#token-issues","title":"Token Issues","text":"<pre><code># Check token in config\ncat ~/.claude-code-router/config.json | jq -r '.Providers[0].api_key'\n\n# If empty or invalid, restart app to regenerate\n</code></pre>"},{"location":"coding-assistants/claude-code-router/#transformation-errors","title":"Transformation Errors","text":"<p>Check logs:</p> <pre><code>tail -f ~/.claude-code-router/plugin.log | grep ERROR\n</code></pre> <p>Common errors:</p> <ul> <li><code>transformRequestIn called</code> - Normal operation</li> <li><code>Error in transformRequestIn</code> - Transformation failed</li> <li><code>Failed to write to log file</code> - Permission issue</li> </ul>"},{"location":"coding-assistants/claude-code-router/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"coding-assistants/claude-code-router/#multiple-providers","title":"Multiple Providers","text":"<p>CCR supports multiple LLM providers:</p> <pre><code>{\n  \"Providers\": [\n    {\n      \"name\": \"databricks\",\n      \"api_base_url\": \"https://&lt;workspace&gt;/serving-endpoints/...\",\n      \"api_key\": \"&lt;token&gt;\",\n      \"models\": [\"databricks-claude-sonnet-4\"]\n    },\n    {\n      \"name\": \"openai\",\n      \"api_base_url\": \"https://api.openai.com/v1\",\n      \"api_key\": \"&lt;openai-key&gt;\",\n      \"models\": [\"gpt-4\", \"gpt-3.5-turbo\"]\n    }\n  ],\n  \"Router\": {\n    \"default\": \"databricks,databricks-claude-sonnet-4\"\n  }\n}\n</code></pre>"},{"location":"coding-assistants/claude-code-router/#custom-transformers","title":"Custom Transformers","text":"<p>Create custom transformers for different providers:</p> <pre><code>// ~/.claude-code-router/plugins/custom-transformer.js\nclass CustomTransformer {\n  constructor(options = {}) {\n    this.name = 'custom-transformer';\n  }\n\n  async transformRequestIn(request, provider) {\n    // Transform request\n    return request;\n  }\n\n  async transformResponseOut(response, provider) {\n    // Transform response\n    return response;\n  }\n}\n\nmodule.exports = CustomTransformer;\n</code></pre>"},{"location":"coding-assistants/claude-code-router/#performance","title":"Performance","text":"<ul> <li>Latency: ~10-50ms overhead</li> <li>Throughput: Limited by Databricks-hosted Sonnet 4</li> <li>Memory: ~50MB for CCR process</li> </ul>"},{"location":"coding-assistants/claude-code-router/#security","title":"Security","text":"<ul> <li>\u2705 Localhost only: Binds to <code>127.0.0.1</code></li> <li>\u2705 Token injection: Secrets not exposed to client</li> <li>\u2705 HTTPS: Communication with Databricks is encrypted</li> <li>\u274c No authentication: Local access only</li> </ul>"},{"location":"coding-assistants/claude-code-router/#next-steps","title":"Next Steps","text":"<ul> <li> <p>Claude Code \u2192</p> <p>Using Claude Code CLI</p> </li> <li> <p>Token Management \u2192</p> <p>How tokens are generated</p> </li> <li> <p>Other Tools \u2192</p> <p>Explore more assistants</p> </li> </ul>"},{"location":"coding-assistants/claude-code/","title":"Claude Code","text":"<p>Claude Code is Anthropic's AI coding assistant, providing conversational code generation, explanation, and editing capabilities directly in your terminal.</p>"},{"location":"coding-assistants/claude-code/#overview","title":"Overview","text":"<p>This guide covers using Claude Code with a direct Anthropic API subscription. For using Claude Code with Databricks-hosted models, see Claude Code Router (CCR) \u2192.</p>"},{"location":"coding-assistants/claude-code/#authentication","title":"Authentication","text":"<p>Claude Code offers multiple authentication options. Choose the method that best fits your needs.</p>"},{"location":"coding-assistants/claude-code/#method-1-claude-pro-or-max-plan-recommended","title":"Method 1: Claude Pro or Max Plan (Recommended)","text":"<pre><code># Run claude and login with your Claude credentials\nclaude\n</code></pre> <p>When prompted during setup, log in with your Claude Pro (20 USD/month) or Claude Max (100 USD/month) account. This provides: - Unified subscription for both Claude Code and web interface - No additional API billing - Automatic usage tracking</p>"},{"location":"coding-assistants/claude-code/#method-2-claude-console-pay-as-you-go","title":"Method 2: Claude Console (Pay-as-you-go)","text":"<pre><code># Run claude and complete OAuth process\nclaude\n</code></pre> <p>Connect through the Claude Console at console.anthropic.com with active billing. A \"Claude Code\" workspace is automatically created for usage tracking and cost management.</p>"},{"location":"coding-assistants/claude-code/#method-3-api-key","title":"Method 3: API Key","text":"<pre><code># Set your Anthropic API key\nexport ANTHROPIC_API_KEY=\"sk-ant-...\"\n\n# Add to ~/.bashrc for persistence\necho 'export ANTHROPIC_API_KEY=\"sk-ant-...\"' &gt;&gt; ~/.bashrc\n\n# Run claude (will use API key automatically)\nclaude\n</code></pre> <p>Get your API key from the Anthropic Console.</p> <p>Note: If <code>ANTHROPIC_API_KEY</code> is set, Claude Code will use it instead of your Claude subscription.</p>"},{"location":"coding-assistants/claude-code/#switching-authentication","title":"Switching Authentication","text":"<p>To change authentication methods:</p> <pre><code># Logout\nclaude logout\n\n# Login with preferred method\nclaude login\n</code></pre>"},{"location":"coding-assistants/claude-code/#usage","title":"Usage","text":"<pre><code># Run Claude Code\nclaude\n</code></pre> <p>Note: The <code>cc</code> command is reserved for Claude Code when using CCR (Databricks-hosted). When using direct Anthropic API, use <code>claude</code>.</p>"},{"location":"coding-assistants/claude-code/#features-with-anthropic-api","title":"Features with Anthropic API","text":"<p>When using direct Anthropic API, you get full access to:</p> <ul> <li>\u2705 Extended thinking modes - Use <code>ultrathink</code>, <code>think</code>, and other thinking keywords for deeper reasoning</li> <li>\u2705 All Claude models - Access to Sonnet, Opus, Haiku variants</li> <li>\u2705 Latest features - Immediate access to new Anthropic features</li> <li>\u2705 Full API capabilities - No limitations from proxy transformations</li> <li>\u2705 200K+ context window - Large context for complex codebases</li> </ul>"},{"location":"coding-assistants/claude-code/#model-selection","title":"Model Selection","text":"<pre><code># Use specific model\nexport CLAUDE_MODEL=\"claude-sonnet-4-20250514\"\n\n# Add to ~/.bashrc\necho 'export CLAUDE_MODEL=\"claude-sonnet-4-20250514\"' &gt;&gt; ~/.bashrc\n</code></pre>"},{"location":"coding-assistants/claude-code/#available-models","title":"Available Models","text":"<ul> <li><code>claude-sonnet-4-20250514</code> - Latest Sonnet 4 (balanced performance)</li> <li><code>claude-opus-4-20250514</code> - Most capable (if available)</li> <li><code>claude-haiku-4-20250305</code> - Fastest and most efficient</li> </ul>"},{"location":"coding-assistants/claude-code/#common-usage-examples","title":"Common Usage Examples","text":""},{"location":"coding-assistants/claude-code/#interactive-mode","title":"Interactive Mode","text":"<pre><code>$ claude\nClaude Code v1.0\nType 'exit' to quit\n\n&gt; explain this code\n[paste code]\n\n&gt; write a function to calculate fibonacci\n[Claude generates code]\n\n&gt; edit the function to use memoization\n[Claude modifies code]\n</code></pre>"},{"location":"coding-assistants/claude-code/#command-line-mode","title":"Command Line Mode","text":"<pre><code># One-off command\nclaude \"write a function to reverse a string\"\n\n# With file context\nclaude \"explain index.py\" &lt; index.py\n\n# Save output to file\nclaude \"write a REST API client\" &gt; api_client.py\n</code></pre>"},{"location":"coding-assistants/claude-code/#multi-turn-conversations","title":"Multi-turn Conversations","text":"<p>Claude Code maintains context across multiple turns:</p> <pre><code>&gt; write a class to manage users\n\n[Claude generates User class]\n\n&gt; add a method to validate email addresses\n\n[Claude adds method to existing class]\n\n&gt; write unit tests for the User class\n\n[Claude generates test suite]\n</code></pre>"},{"location":"coding-assistants/claude-code/#advanced-usage","title":"Advanced Usage","text":""},{"location":"coding-assistants/claude-code/#with-file-context","title":"With File Context","text":"<pre><code># Provide file as input\nclaude \"add docstrings\" &lt; my_script.py\n\n# Or reference files in prompt\nclaude \"explain the main function in app.py\"\n</code></pre>"},{"location":"coding-assistants/claude-code/#custom-instructions","title":"Custom Instructions","text":"<pre><code># Set preferences\nexport CLAUDE_CODE_INSTRUCTIONS=\"Always include type hints and docstrings\"\n\nclaude \"write a function to sort a list\"\n</code></pre>"},{"location":"coding-assistants/claude-code/#using-extended-thinking","title":"Using Extended Thinking","text":"<p>With Anthropic API, you can use extended thinking modes:</p> <pre><code># Use ultra thinking for complex problems\nclaude \"ultrathink: design a distributed caching system with consistency guarantees\"\n\n# Use standard thinking for moderate complexity\nclaude \"think: optimize this database query for performance\"\n</code></pre> <p>Note: Thinking modes are not available when using Databricks-hosted Claude via CCR.</p>"},{"location":"coding-assistants/claude-code/#best-practices","title":"Best Practices","text":""},{"location":"coding-assistants/claude-code/#1-be-specific","title":"1. Be Specific","text":"<pre><code># Good\n&gt; write a Python function that reads a CSV file, filters rows where column 'status' is 'active', and returns a list of dictionaries\n\n# Less optimal\n&gt; read csv file\n</code></pre>"},{"location":"coding-assistants/claude-code/#2-iterate-incrementally","title":"2. Iterate Incrementally","text":"<pre><code>&gt; write a basic User class\n\n[review output]\n\n&gt; add email validation to the User class\n\n[review output]\n\n&gt; add password hashing\n</code></pre>"},{"location":"coding-assistants/claude-code/#3-provide-context","title":"3. Provide Context","text":"<pre><code>&gt; I'm working on a Flask app. Write a route handler for user registration.\n\n# Better than:\n&gt; write a function for user registration\n</code></pre>"},{"location":"coding-assistants/claude-code/#4-use-thinking-modes-for-complex-tasks","title":"4. Use Thinking Modes for Complex Tasks","text":"<pre><code># For architectural decisions\n&gt; ultrathink: should I use microservices or monolith for this e-commerce platform?\n\n# For optimization problems\n&gt; think: how can I reduce the time complexity of this algorithm?\n</code></pre>"},{"location":"coding-assistants/claude-code/#custom-commands","title":"Custom Commands","text":"<p>Claude Code supports custom commands that you can define in your project. Commands are stored in <code>./.claude/commands/</code> directory and allow you to create reusable prompts and workflows.</p>"},{"location":"coding-assistants/claude-code/#setting-up-commands","title":"Setting Up Commands","text":"<p>Create a commands directory in your project:</p> <pre><code>mkdir -p .claude/commands\n</code></pre>"},{"location":"coding-assistants/claude-code/#creating-a-command","title":"Creating a Command","text":"<p>Commands are simple text files with prompts. Create a file in <code>.claude/commands/</code>:</p> <p>Example: <code>.claude/commands/review.md</code></p> <pre><code>Review this code for:\n- Bugs and potential errors\n- Performance issues\n- Security vulnerabilities\n- Code style and best practices\n- Maintainability improvements\n\nProvide specific, actionable feedback.\n</code></pre> <p>Example: <code>.claude/commands/test.md</code></p> <pre><code>Generate comprehensive pytest unit tests for this code.\n\nInclude:\n- Happy path tests\n- Edge cases\n- Error handling\n- Mock external dependencies\n- Docstrings for each test\n</code></pre> <p>Example: <code>.claude/commands/explain.md</code></p> <pre><code>Explain this code in detail:\n- What it does\n- How it works\n- Key algorithms or patterns used\n- Any potential gotchas or limitations\n</code></pre>"},{"location":"coding-assistants/claude-code/#using-commands","title":"Using Commands","text":"<p>Once created, use commands in the Claude Code interactive interface with slash commands:</p> <pre><code>$ claude\nClaude Code v1.0\nType 'exit' to quit\n\n&gt; /review\n[paste your code here]\n\nClaude will now review the code based on the review.md command template.\n\n&gt; /test\n[paste your code here]\n\nClaude will generate pytest tests based on the test.md command template.\n\n&gt; /explain\n[paste your code here]\n\nClaude will explain the code based on the explain.md command template.\n</code></pre>"},{"location":"coding-assistants/claude-code/#command-best-practices","title":"Command Best Practices","text":"<ol> <li>Be specific: Include clear instructions in your commands</li> <li>Use markdown: Format commands with markdown for better readability</li> <li>Add context: Include relevant details like coding standards or project conventions</li> <li>Organize by task: Create separate commands for different workflows (review, test, refactor, etc.)</li> </ol>"},{"location":"coding-assistants/claude-code/#example-command-library","title":"Example Command Library","text":"<p>Create a library of commands for common tasks:</p> <pre><code>.claude/commands/\n\u251c\u2500\u2500 review.md          # Code review\n\u251c\u2500\u2500 test.md            # Generate tests\n\u251c\u2500\u2500 refactor.md        # Refactoring suggestions\n\u251c\u2500\u2500 optimize.md        # Performance optimization\n\u251c\u2500\u2500 document.md        # Add documentation\n\u2514\u2500\u2500 security.md        # Security audit\n</code></pre>"},{"location":"coding-assistants/claude-code/#configuration","title":"Configuration","text":""},{"location":"coding-assistants/claude-code/#api-key-management","title":"API Key Management","text":"<p>Store your API key securely:</p> <pre><code># In ~/.bashrc or ~/.zshrc\nexport ANTHROPIC_API_KEY=\"sk-ant-...\"\n\n# Or use a secrets manager\nexport ANTHROPIC_API_KEY=$(cat ~/.secrets/anthropic_key)\n</code></pre>"},{"location":"coding-assistants/claude-code/#custom-settings","title":"Custom Settings","text":"<pre><code># Set default model\nexport CLAUDE_MODEL=\"claude-sonnet-4-20250514\"\n\n# Set custom instructions\nexport CLAUDE_CODE_INSTRUCTIONS=\"Use type hints, write docstrings, follow PEP 8\"\n\n# Set timeout (in seconds)\nexport CLAUDE_TIMEOUT=120\n</code></pre>"},{"location":"coding-assistants/claude-code/#troubleshooting","title":"Troubleshooting","text":""},{"location":"coding-assistants/claude-code/#api-key-issues","title":"API Key Issues","text":"<pre><code># Check if API key is set\necho $ANTHROPIC_API_KEY\n\n# Test API key\ncurl https://api.anthropic.com/v1/messages \\\n  -H \"x-api-key: $ANTHROPIC_API_KEY\" \\\n  -H \"anthropic-version: 2023-06-01\" \\\n  -H \"content-type: application/json\" \\\n  -d '{\"model\":\"claude-sonnet-4-20250514\",\"max_tokens\":1024,\"messages\":[{\"role\":\"user\",\"content\":\"Hello\"}]}'\n</code></pre>"},{"location":"coding-assistants/claude-code/#connection-issues","title":"Connection Issues","text":"<pre><code># Check network connectivity\nping api.anthropic.com\n\n# Check for proxy issues\necho $HTTP_PROXY\necho $HTTPS_PROXY\n</code></pre>"},{"location":"coding-assistants/claude-code/#rate-limits","title":"Rate Limits","text":"<p>If you hit rate limits:</p> <ul> <li>Wait before retrying</li> <li>Use a higher tier API plan</li> <li>Optimize your prompts to use fewer tokens</li> </ul>"},{"location":"coding-assistants/claude-code/#comparison-anthropic-api-vs-databricks-ccr","title":"Comparison: Anthropic API vs Databricks CCR","text":"Feature Anthropic API Databricks CCR Extended Thinking \u2705 Yes \u274c No All Models \u2705 Yes \u274c Only Sonnet 4 Latest Features \u2705 Immediate \u26a0\ufe0f Delayed Cost \ud83d\udcb0 Per-token pricing \u2705 Included in Databricks Setup API key required Auto-configured Use Case Production, personal Databricks workshops"},{"location":"coding-assistants/claude-code/#next-steps","title":"Next Steps","text":"<ul> <li> <p>CCR Configuration \u2192</p> <p>Use Claude Code with Databricks models</p> </li> <li> <p>Other Coding Assistants \u2192</p> <p>Explore more tools</p> </li> <li> <p>Anthropic Documentation \u2192</p> <p>Official Claude API docs</p> </li> </ul>"},{"location":"coding-assistants/codex/","title":"OpenAI Codex","text":"<p>OpenAI Codex CLI provides quick code generation capabilities from the command line.</p>"},{"location":"coding-assistants/codex/#overview","title":"Overview","text":"<ul> <li>Quick code snippets via command line</li> <li>No conversation history (single-turn only)</li> <li>Automatic installation via npm</li> <li>Direct API access (not routed through Databricks)</li> </ul>"},{"location":"coding-assistants/codex/#authentication","title":"Authentication","text":"<p>OpenAI Codex CLI requires authentication before use. On first run, you'll be prompted to authenticate.</p>"},{"location":"coding-assistants/codex/#method-1-chatgpt-account-recommended","title":"Method 1: ChatGPT Account (Recommended)","text":"<pre><code># Run codex and select \"Sign in with ChatGPT\"\ncodex\n</code></pre> <p>This method works with: - ChatGPT Plus - ChatGPT Pro - ChatGPT Team - ChatGPT Enterprise</p> <p>Authentication uses OAuth 2.0 and credentials are stored in <code>~/.codex/auth.json</code>.</p> <p>Remote Server Authentication</p> <p>When running on a remote server (such as a Databricks workspace), you cannot access the OAuth browser flow directly. To authenticate:</p> <ol> <li>On your local laptop, run the <code>codex</code> CLI and complete the authentication flow</li> <li>After authentication, copy the <code>~/.codex/auth.json</code> file from your laptop</li> <li>Transfer the <code>auth.json</code> file to the remote server's <code>~/.codex/</code> folder</li> </ol> <p>This allows you to use your authenticated session on the remote server without needing browser access.</p>"},{"location":"coding-assistants/codex/#method-2-api-key","title":"Method 2: API Key","text":"<pre><code># Set your OpenAI API key\nexport OPENAI_API_KEY=\"sk-...\"\n\n# Add to ~/.bashrc for persistence\necho 'export OPENAI_API_KEY=\"sk-...\"' &gt;&gt; ~/.bashrc\n\n# Run codex\ncodex\n</code></pre> <p>Get your API key from platform.openai.com/api-keys.</p> <p>Note: Enterprise sign-in support is coming later. Use API key authentication for now.</p>"},{"location":"coding-assistants/codex/#usage","title":"Usage","text":""},{"location":"coding-assistants/codex/#basic-command","title":"Basic Command","text":"<pre><code>codex --prompt \"write a function to reverse a string\"\n</code></pre>"},{"location":"coding-assistants/codex/#with-language-hint","title":"With Language Hint","text":"<pre><code>codex --lang python --prompt \"read a CSV file\"\ncodex --lang javascript --prompt \"fetch data from API\"\n</code></pre>"},{"location":"coding-assistants/codex/#configuration","title":"Configuration","text":"<p>Codex requires an OpenAI API key (not automatically configured):</p> <pre><code>export OPENAI_API_KEY=\"sk-...\"\n</code></pre> <p>Note: In Databricks DevBox, Codex is installed but not pre-configured for Databricks models. It's included for completeness but requires manual API key setup.</p>"},{"location":"coding-assistants/codex/#when-to-use","title":"When to Use","text":"<p>Use Codex for:</p> <ul> <li>\u2705 Quick single-turn code generation</li> <li>\u2705 Simple snippets and functions</li> <li>\u2705 Language-specific code patterns</li> </ul> <p>Use Claude Code instead for:</p> <ul> <li>\u274c Multi-turn conversations</li> <li>\u274c Code explanation and editing</li> <li>\u274c Complex multi-file projects</li> <li>\u274c Databricks-integrated workflows</li> </ul>"},{"location":"coding-assistants/codex/#next-steps","title":"Next Steps","text":"<ul> <li> <p>Claude Code \u2192</p> <p>More powerful alternative</p> </li> <li> <p>Gemini \u2192</p> <p>Another option</p> </li> </ul>"},{"location":"coding-assistants/gemini/","title":"Google Gemini","text":"<p>Google Gemini CLI provides conversational AI capabilities from Google's generative AI models.</p>"},{"location":"coding-assistants/gemini/#overview","title":"Overview","text":"<ul> <li>Conversational AI via command line</li> <li>Multiple models supported</li> <li>Automatic installation via npm</li> <li>Direct API access (not routed through Databricks)</li> </ul>"},{"location":"coding-assistants/gemini/#authentication","title":"Authentication","text":"<p>Gemini CLI requires authentication with Google's AI services. On initial startup, you'll need to configure authentication.</p>"},{"location":"coding-assistants/gemini/#method-1-personal-google-account-recommended-for-free-tier","title":"Method 1: Personal Google Account (Recommended for Free Tier)","text":"<pre><code># Run gemini and follow the browser authentication flow\ngemini\n</code></pre> <p>On first run, Gemini CLI will open a browser for authentication. Once authenticated, credentials are cached locally for subsequent runs.</p> <p>Free Access: Login with a personal Google account to get a free Gemini Code Assist license with access to Gemini 2.5 Pro and its 1 million token context window.</p>"},{"location":"coding-assistants/gemini/#method-2-api-key","title":"Method 2: API Key","text":"<pre><code># Set your Gemini API key\nexport GEMINI_API_KEY=\"...\"\n\n# Or set Google API key\nexport GOOGLE_API_KEY=\"...\"\n\n# Add to ~/.bashrc for persistence\necho 'export GEMINI_API_KEY=\"...\"' &gt;&gt; ~/.bashrc\n\n# Run gemini\ngemini\n</code></pre> <p>Get your API key from Google AI Studio.</p>"},{"location":"coding-assistants/gemini/#method-3-google-cloud-vertex-ai","title":"Method 3: Google Cloud / Vertex AI","text":"<p>For production use with Google Cloud:</p> <pre><code># Ensure Vertex AI API is enabled in your project\n# Unset API key environment variables\nunset GOOGLE_API_KEY\nunset GEMINI_API_KEY\n\n# Use Application Default Credentials\ngemini\n</code></pre>"},{"location":"coding-assistants/gemini/#method-4-cloud-shell","title":"Method 4: Cloud Shell","text":"<p>When running in Google Cloud Shell, authentication is automatic using your logged-in credentials.</p>"},{"location":"coding-assistants/gemini/#switching-authentication","title":"Switching Authentication","text":"<p>To change authentication methods:</p> <pre><code>$ gemini\n\n&gt; /auth\n[Select authentication method]\n</code></pre>"},{"location":"coding-assistants/gemini/#usage","title":"Usage","text":""},{"location":"coding-assistants/gemini/#interactive-chat","title":"Interactive Chat","text":"<pre><code>gemini chat\n</code></pre>"},{"location":"coding-assistants/gemini/#single-prompt","title":"Single Prompt","text":"<pre><code>gemini ask \"explain quantum computing\"\n</code></pre>"},{"location":"coding-assistants/gemini/#configuration","title":"Configuration","text":"<p>Gemini requires a Google API key (not automatically configured):</p> <pre><code>export GOOGLE_API_KEY=\"...\"\n</code></pre> <p>Note: In Databricks DevBox, Gemini is installed but not pre-configured for Databricks models. It's included for completeness but requires manual API key setup.</p>"},{"location":"coding-assistants/gemini/#when-to-use","title":"When to Use","text":"<p>Use Gemini for:</p> <ul> <li>\u2705 General AI conversations</li> <li>\u2705 Non-coding questions</li> <li>\u2705 Google-specific integrations</li> </ul> <p>Use Claude Code instead for:</p> <ul> <li>\u274c Databricks-integrated workflows</li> <li>\u274c Pre-configured setup</li> <li>\u274c Code-specific tasks</li> </ul>"},{"location":"coding-assistants/gemini/#next-steps","title":"Next Steps","text":"<ul> <li> <p>Claude Code \u2192</p> <p>Recommended for Databricks</p> </li> <li> <p>Other Tools \u2192</p> <p>Explore all assistants</p> </li> </ul>"},{"location":"configuration/","title":"Configuration Overview","text":"<p>Databricks DevBox is configured through a YAML file (<code>devbox.yaml</code>) that controls extension groups, server settings, UI behavior, and workspace templates.</p>"},{"location":"configuration/#configuration-file-location","title":"Configuration File Location","text":"<p>The configuration file can be specified via environment variable:</p> <pre><code>export DEVBOX_CONFIG_PATH=/path/to/devbox.yaml\n</code></pre> <p>Default locations:</p> <ul> <li>Databricks App: <code>/app/python/source_code/app/devbox.yaml</code></li> <li>Local: <code>./app/devbox.yaml</code></li> </ul>"},{"location":"configuration/#configuration-sections","title":"Configuration Sections","text":""},{"location":"configuration/#1-extension-groups","title":"1. Extension Groups","text":"<p>Define reusable sets of VS Code extensions with optional user settings.</p> <pre><code>extension_groups:\n  python:\n    name: \"Python\"\n    description: \"Python development tools\"\n    extensions:\n      - \"ms-python.python\"\n      - \"ms-pyright.pyright\"\n    user_settings:\n      \"python.languageServer\": \"None\"\n</code></pre> <p>Learn more \u2192</p>"},{"location":"configuration/#2-server-configuration","title":"2. Server Configuration","text":"<p>Control server ports and networking.</p> <pre><code>server:\n  default_port: 8000\n  code_server_port_range:\n    start: 8010\n    end: 8100\n</code></pre> <p>Learn more \u2192</p>"},{"location":"configuration/#3-ui-configuration","title":"3. UI Configuration","text":"<p>Set defaults for the web interface.</p> <pre><code>ui:\n  default_extension_groups:\n    - \"python\"\n    - \"jupyter\"\n  settings:\n    auto_refresh_interval: 5000\n    show_advanced_options: false\n    enable_dark_mode: true\n</code></pre> <p>Learn more \u2192</p>"},{"location":"configuration/#4-packaged-assets-templates","title":"4. Packaged Assets (Templates)","text":"<p>Define quick-start templates for common scenarios.</p> <pre><code>packaged_assets:\n  tabs:\n  - name: \"Workshops\"\n    items:\n    - name: \"Databricks Workshop\"\n      description: \"ML workshop starter\"\n      extensions_groups:\n        - \"python\"\n        - \"databricks\"\n      github_url: \"https://github.com/org/workshop.git\"\n</code></pre> <p>Learn more \u2192</p>"},{"location":"configuration/#complete-example","title":"Complete Example","text":"<pre><code># Databricks Devbox Configuration\nextension_groups:\n  python:\n    name: \"Python\"\n    description: \"Python development tools\"\n    extensions:\n      - \"ms-python.python\"\n      - \"ms-pyright.pyright\"\n    user_settings:\n      \"python.languageServer\": \"None\"\n\n  jupyter:\n    name: \"Jupyter\"\n    description: \"Jupyter notebooks\"\n    extensions:\n      - \"ms-toolsai.jupyter\"\n      - \"ms-toolsai.jupyter-renderers\"\n\n  databricks:\n    name: \"Databricks\"\n    description: \"Databricks integration\"\n    extensions:\n      - \"databricks.databricks\"\n\nserver:\n  default_port: 8000\n  code_server_port_range:\n    start: 8010\n    end: 8100\n\nui:\n  default_extension_groups:\n    - \"python\"\n    - \"jupyter\"\n  settings:\n    auto_refresh_interval: 5000\n    show_advanced_options: false\n    enable_dark_mode: true\n  workspace:\n    default_type: \"empty\"\n    max_upload_size_mb: 100\n    supported_archive_types:\n      - \".zip\"\n      - \".tar.gz\"\n\npackaged_assets:\n  tabs:\n  - name: \"Workshops\"\n    items:\n    - name: \"Databricks Workshop\"\n      description: \"Complete workshop environment\"\n      extensions_groups:\n        - \"python\"\n        - \"jupyter\"\n        - \"databricks\"\n      thumbnail_url: \"https://example.com/image.jpg\"\n      github_url: \"https://github.com/org/workshop.git\"\n      icon_links:\n        - lucide_icon: \"book\"\n          url: \"https://docs.example.com\"\n</code></pre>"},{"location":"configuration/#configuration-loading","title":"Configuration Loading","text":""},{"location":"configuration/#priority-order","title":"Priority Order","text":"<ol> <li>Environment variable: <code>DEVBOX_CONFIG_PATH</code></li> <li>Default: <code>./app/devbox.yaml</code></li> <li>Fallback: Built-in defaults</li> </ol>"},{"location":"configuration/#validation","title":"Validation","text":"<p>The server validates configuration on startup:</p> <ul> <li>\u2705 All required fields present</li> <li>\u2705 Port ranges valid</li> <li>\u2705 Extension groups well-formed</li> <li>\u2705 Template URLs accessible</li> </ul>"},{"location":"configuration/#defaults","title":"Defaults","text":"<p>Missing values are filled with sensible defaults:</p> <pre><code>// Default extension groups\nif len(config.ExtensionGroups) == 0 {\n    config.ExtensionGroups = defaultExtensionGroups\n}\n\n// Default server port\nif config.Server.DefaultPort == 0 {\n    config.Server.DefaultPort = 8000\n}\n\n// Default port range\nif config.Server.CodeServerPortRange.Start == 0 {\n    config.Server.CodeServerPortRange = PortRange{Start: 8010, End: 8100}\n}\n</code></pre>"},{"location":"configuration/#reloading-configuration","title":"Reloading Configuration","text":"<p>Configuration can be reloaded without restarting the server (future feature):</p> <pre><code># Reload config via API\ncurl -X POST http://localhost:8000/config/reload\n</code></pre> <p>Currently, changes require a server restart.</p>"},{"location":"configuration/#environment-variables","title":"Environment Variables","text":"<p>Override configuration at runtime:</p> Variable Description Default <code>DEVBOX_CONFIG_PATH</code> Path to devbox.yaml <code>./app/devbox.yaml</code> <code>DEVBOX_SERVER_PORT</code> Manager server port <code>8000</code> <code>CODE_SERVER_VERSION</code> code-server version <code>4.104.1</code> <code>LHA_SERVER_VERSION</code> Go binary version <code>latest</code> <code>CLAUDE_CODE_TOKEN_EXPIRY_SECONDS</code> Token expiry <code>3600</code>"},{"location":"configuration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"configuration/#configuration-not-loading","title":"Configuration Not Loading","text":"<p>Check the path:</p> <pre><code>echo $DEVBOX_CONFIG_PATH\nls -la $DEVBOX_CONFIG_PATH\n</code></pre> <p>Check logs:</p> <pre><code># Look for \"Successfully loaded configuration from...\"\n# or \"Warning: Failed to load config from...\"\n</code></pre>"},{"location":"configuration/#invalid-yaml-syntax","title":"Invalid YAML Syntax","text":"<pre><code># Validate YAML\npython -c \"import yaml; yaml.safe_load(open('devbox.yaml'))\"\n</code></pre>"},{"location":"configuration/#extensions-not-installing","title":"Extensions Not Installing","text":"<ul> <li>Verify extension IDs are correct</li> <li>Check Open VSX marketplace availability</li> <li>Review extension installation logs</li> </ul>"},{"location":"configuration/#next-steps","title":"Next Steps","text":"<ul> <li> <p>devbox.yaml Reference \u2192</p> <p>Complete configuration reference</p> </li> <li> <p>Extension Groups \u2192</p> <p>Configure extension groups</p> </li> <li> <p>Packaged Assets \u2192</p> <p>Setup templates</p> </li> </ul>"},{"location":"configuration/devbox-yaml/","title":"devbox.yaml Reference","text":"<p>Complete reference for the <code>devbox.yaml</code> configuration file.</p>"},{"location":"configuration/devbox-yaml/#file-location","title":"File Location","text":"<ul> <li>Environment Variable: <code>DEVBOX_CONFIG_PATH</code></li> <li>Default: <code>./app/devbox.yaml</code></li> </ul>"},{"location":"configuration/devbox-yaml/#top-level-structure","title":"Top-Level Structure","text":"<pre><code>extension_groups:    # Map of extension group definitions\n  &lt;group-key&gt;:       # Unique identifier for the group\n    # ...\n\nserver:              # Server configuration\n  # ...\n\nui:                  # UI configuration\n  # ...\n\npackaged_assets:     # Template definitions (optional)\n  # ...\n</code></pre>"},{"location":"configuration/devbox-yaml/#extension-groups","title":"Extension Groups","text":"<p>Define reusable sets of VS Code extensions.</p>"},{"location":"configuration/devbox-yaml/#schema","title":"Schema","text":"<pre><code>extension_groups:\n  &lt;group-key&gt;:                    # Unique identifier (e.g., \"python\", \"jupyter\")\n    name: string                  # Display name in UI\n    description: string           # Description shown in UI\n    extensions: string[]          # List of extension IDs\n    user_settings: object         # Optional VS Code settings (optional)\n</code></pre>"},{"location":"configuration/devbox-yaml/#example","title":"Example","text":"<pre><code>extension_groups:\n  python:\n    name: \"Python\"\n    description: \"Python development tools and language support\"\n    extensions:\n      - \"ms-python.python\"\n      - \"ms-pyright.pyright\"\n    user_settings:\n      \"python.languageServer\": \"None\"\n      \"python.defaultInterpreterPath\": \"/usr/bin/python3\"\n\n  jupyter:\n    name: \"Jupyter\"\n    description: \"Jupyter notebook support and tools\"\n    extensions:\n      - \"ms-toolsai.jupyter\"\n      - \"ms-toolsai.jupyter-renderers\"\n      - \"ms-toolsai.jupyter-keymap\"\n      - \"ms-toolsai.vscode-jupyter-cell-tags\"\n\n  databricks:\n    name: \"Databricks\"\n    description: \"Databricks platform integration and SQL tools\"\n    extensions:\n      - \"databricks.databricks\"\n      - \"databricks.sqltools-databricks-driver\"\n</code></pre>"},{"location":"configuration/devbox-yaml/#extension-ids","title":"Extension IDs","text":"<p>Extension IDs follow the format: <code>&lt;publisher&gt;.&lt;extension-name&gt;</code></p> <p>Finding Extension IDs:</p> <ol> <li>Search Open VSX Registry</li> <li>Look for \"Identifier\" on extension page</li> <li>Example: <code>ms-python.python</code></li> </ol>"},{"location":"configuration/devbox-yaml/#user-settings","title":"User Settings","text":"<p>VS Code settings applied when extensions are installed.</p> <p>Common settings:</p> <pre><code>user_settings:\n  # Python\n  \"python.languageServer\": \"Pylance\"\n  \"python.linting.enabled\": true\n  \"python.formatting.provider\": \"black\"\n\n  # Editor\n  \"editor.fontSize\": 14\n  \"editor.tabSize\": 4\n  \"editor.rulers\": [80, 120]\n\n  # Terminal\n  \"terminal.integrated.fontSize\": 12\n  \"terminal.integrated.shell.linux\": \"/bin/bash\"\n\n  # Files\n  \"files.autoSave\": \"afterDelay\"\n  \"files.autoSaveDelay\": 1000\n</code></pre>"},{"location":"configuration/devbox-yaml/#server-configuration","title":"Server Configuration","text":"<p>Controls server ports and networking.</p>"},{"location":"configuration/devbox-yaml/#schema_1","title":"Schema","text":"<pre><code>server:\n  default_port: number            # Manager server port (default: 8000)\n  code_server_port_range:\n    start: number                 # First port for code-server (default: 8010)\n    end: number                   # Last port for code-server (default: 8100)\n</code></pre>"},{"location":"configuration/devbox-yaml/#example_1","title":"Example","text":"<pre><code>server:\n  default_port: 8000              # DevBox manager runs on :8000\n  code_server_port_range:\n    start: 8010                   # code-server instances use :8010-8100\n    end: 8100                     # Maximum 90 concurrent servers\n</code></pre>"},{"location":"configuration/devbox-yaml/#port-management","title":"Port Management","text":"<ul> <li>Manager Port: Single port for web UI and API</li> <li>code-server Range: One port per instance</li> <li>Dynamic Allocation: Ports assigned sequentially from start</li> </ul> <p>Calculating Capacity:</p> <pre><code>Max Servers = end - start + 1\nExample: 8100 - 8010 + 1 = 91 servers\n</code></pre>"},{"location":"configuration/devbox-yaml/#ui-configuration","title":"UI Configuration","text":"<p>Customize web interface behavior.</p>"},{"location":"configuration/devbox-yaml/#schema_2","title":"Schema","text":"<pre><code>ui:\n  default_extension_groups: string[]    # Pre-selected groups in UI\n  settings:\n    auto_refresh_interval: number       # Milliseconds between refreshes\n    show_advanced_options: boolean      # Show advanced options\n    enable_dark_mode: boolean           # Enable dark theme\n  workspace:\n    default_type: string                # \"empty\" | \"upload\" | \"github\"\n    max_upload_size_mb: number          # Max ZIP upload size\n    supported_archive_types: string[]   # Allowed file types\n</code></pre>"},{"location":"configuration/devbox-yaml/#example_2","title":"Example","text":"<pre><code>ui:\n  # Pre-select these extension groups in \"Create Server\" dialog\n  default_extension_groups:\n    - \"python\"\n    - \"jupyter\"\n\n  settings:\n    auto_refresh_interval: 5000         # Refresh server list every 5 seconds\n    show_advanced_options: false        # Hide advanced options by default\n    enable_dark_mode: true              # Use dark theme\n\n  workspace:\n    default_type: \"empty\"               # Default to empty workspace\n    max_upload_size_mb: 100             # Max 100MB ZIP uploads\n    supported_archive_types:\n      - \".zip\"\n      - \".tar.gz\"\n</code></pre>"},{"location":"configuration/devbox-yaml/#packaged-assets-templates","title":"Packaged Assets (Templates)","text":"<p>Define quick-start templates with pre-configured extensions and workspaces.</p> <p>See Packaged Assets documentation for complete reference.</p>"},{"location":"configuration/devbox-yaml/#complete-configuration-example","title":"Complete Configuration Example","text":"<pre><code># Databricks Devbox Configuration\n# This file controls extension groups, server settings, and UI configuration\n\n# Extension groups available for devbox instances\nextension_groups:\n  python:\n    name: \"Python\"\n    description: \"Python development tools and language support\"\n    extensions:\n      - \"ms-python.python\"\n      - \"ms-pyright.pyright\"\n    user_settings:\n      \"python.languageServer\": \"None\"\n\n  jupyter:\n    name: \"Jupyter\"\n    description: \"Jupyter notebook support and tools\"\n    extensions:\n      - \"ms-toolsai.jupyter\"\n      - \"ms-toolsai.jupyter-renderers\"\n      - \"ms-toolsai.jupyter-keymap\"\n      - \"ms-toolsai.vscode-jupyter-cell-tags\"\n\n  databricks:\n    name: \"Databricks\"\n    description: \"Databricks platform integration and SQL tools\"\n    extensions:\n      - \"databricks.databricks\"\n      - \"databricks.sqltools-databricks-driver\"\n\n# Server configuration\nserver:\n  # Default port for the devbox manager server\n  default_port: 8000\n\n  # Port range for code-server instances\n  code_server_port_range:\n    start: 8010\n    end: 8100\n\n# UI configuration\nui:\n  # Default extension groups to pre-select\n  default_extension_groups:\n    - \"python\"\n    - \"jupyter\"\n\n  # UI behavior settings\n  settings:\n    auto_refresh_interval: 5000  # milliseconds\n    show_advanced_options: false\n    enable_dark_mode: true\n\n  # Workspace initialization defaults\n  workspace:\n    default_type: \"empty\"  # empty, upload, github\n    max_upload_size_mb: 100\n    supported_archive_types:\n      - \".zip\"\n      - \".tar.gz\"\n\n# Packaged assets (templates)\npackaged_assets:\n  tabs:\n  - name: \"Workshops\"\n    items:\n    - name: \"Databricks Workshop\"\n      description: \"Databricks Workshop starter project\"\n      extensions_groups:\n        - \"python\"\n        - \"databricks\"\n      thumbnail_url: \"https://example.com/thumbnail.jpg\"\n      github_url: \"https://github.com/org/workshop.git\"\n      icon_links:\n        - lucide_icon: \"book\"\n          url: \"https://docs.example.com/workshop\"\n        - lucide_icon: \"youtube\"\n          url: \"https://youtube.com/watch?v=...\"\n</code></pre>"},{"location":"configuration/devbox-yaml/#configuration-validation","title":"Configuration Validation","text":"<p>The server validates configuration on startup:</p>"},{"location":"configuration/devbox-yaml/#required-fields","title":"Required Fields","text":"<ul> <li>\u2705 At least one extension group must be defined</li> <li>\u2705 <code>server.code_server_port_range.start</code> &lt; <code>server.code_server_port_range.end</code></li> <li>\u2705 All extension IDs are valid strings</li> </ul>"},{"location":"configuration/devbox-yaml/#optional-fields","title":"Optional Fields","text":"<p>Missing optional fields are filled with defaults:</p> <pre><code>// Default values\nDefaultPort: 8000\nCodeServerPortRange: {Start: 8010, End: 8100}\nAutoRefreshInterval: 5000\nShowAdvancedOptions: false\nEnableDarkMode: true\nDefaultType: \"empty\"\nMaxUploadSizeMB: 100\n</code></pre>"},{"location":"configuration/devbox-yaml/#reloading-configuration","title":"Reloading Configuration","text":"<p>Currently, configuration changes require a server restart:</p> <pre><code># Stop server\ncurl -X POST http://localhost:8000/shutdown\n\n# Restart with new config\nDEVBOX_CONFIG_PATH=./new-config.yaml ./databricks-devbox\n</code></pre> <p>Future versions may support hot-reloading via API endpoint.</p>"},{"location":"configuration/devbox-yaml/#environment-variable-overrides","title":"Environment Variable Overrides","text":"<p>Some settings can be overridden via environment variables:</p> <pre><code># Override server port\nexport DEVBOX_SERVER_PORT=9000\n\n# Override config file location\nexport DEVBOX_CONFIG_PATH=/custom/path/devbox.yaml\n</code></pre>"},{"location":"configuration/devbox-yaml/#best-practices","title":"Best Practices","text":""},{"location":"configuration/devbox-yaml/#1-use-descriptive-names","title":"1. Use Descriptive Names","text":"<pre><code># Good\nextension_groups:\n  ml-stack:\n    name: \"Machine Learning Stack\"\n    description: \"Complete ML development environment\"\n\n# Avoid\nextension_groups:\n  group1:\n    name: \"Group 1\"\n</code></pre>"},{"location":"configuration/devbox-yaml/#2-group-related-extensions","title":"2. Group Related Extensions","text":"<pre><code># Good - logically grouped\ndata-science:\n  extensions:\n    - \"ms-python.python\"\n    - \"ms-toolsai.jupyter\"\n    - \"ms-python.vscode-pylance\"\n\n# Avoid - unrelated extensions\nmixed:\n  extensions:\n    - \"ms-python.python\"\n    - \"golang.go\"\n    - \"rust-lang.rust\"\n</code></pre>"},{"location":"configuration/devbox-yaml/#3-document-custom-settings","title":"3. Document Custom Settings","text":"<pre><code>python:\n  user_settings:\n    # Disable Pylance for compatibility with Databricks\n    \"python.languageServer\": \"None\"\n\n    # Auto-format on save\n    \"editor.formatOnSave\": true\n</code></pre>"},{"location":"configuration/devbox-yaml/#4-reasonable-port-ranges","title":"4. Reasonable Port Ranges","text":"<pre><code># Good - allows 90 concurrent servers\ncode_server_port_range:\n  start: 8010\n  end: 8100\n\n# Avoid - too many ports (security risk)\ncode_server_port_range:\n  start: 8010\n  end: 9999  # 1989 ports!\n</code></pre>"},{"location":"configuration/devbox-yaml/#troubleshooting","title":"Troubleshooting","text":""},{"location":"configuration/devbox-yaml/#configuration-not-loading","title":"Configuration Not Loading","text":"<pre><code># Check file exists\nls -la $DEVBOX_CONFIG_PATH\n\n# Validate YAML syntax\npython -c \"import yaml; yaml.safe_load(open('devbox.yaml'))\"\n\n# Check server logs\ntail -f logs/server.log | grep \"config\"\n</code></pre>"},{"location":"configuration/devbox-yaml/#extensions-not-installing","title":"Extensions Not Installing","text":"<ul> <li>Verify extension IDs on Open VSX</li> <li>Check network connectivity</li> <li>Review installation logs in web UI</li> </ul>"},{"location":"configuration/devbox-yaml/#port-conflicts","title":"Port Conflicts","text":"<pre><code># Check if ports are available\nlsof -i :8000\nlsof -i :8010\n\n# Kill conflicting processes\nkill -9 &lt;PID&gt;\n</code></pre>"},{"location":"configuration/devbox-yaml/#next-steps","title":"Next Steps","text":"<ul> <li> <p>Extension Groups \u2192</p> <p>Detailed extension configuration</p> </li> <li> <p>Packaged Assets \u2192</p> <p>Template configuration</p> </li> </ul>"},{"location":"configuration/extension-groups/","title":"Extension Groups","text":"<p>Extension groups are pre-configured sets of VS Code extensions that can be quickly deployed to code-server instances.</p>"},{"location":"configuration/extension-groups/#overview","title":"Overview","text":"<p>Extension groups allow you to:</p> <ul> <li>Bundle related extensions together (e.g., all Python tools)</li> <li>Apply consistent settings across servers</li> <li>Quick setup with pre-selected extensions</li> <li>Reusability across multiple servers</li> </ul>"},{"location":"configuration/extension-groups/#configuration","title":"Configuration","text":"<p>See the example <code>devbox.yaml</code> configuration in <code>app/devbox.yaml</code>.</p> <p>Full configuration reference \u2192</p>"},{"location":"configuration/packaged-assets/","title":"Packaged Assets &amp; Templates","text":"<p>Packaged assets provide quick-start templates for common development scenarios.</p>"},{"location":"configuration/packaged-assets/#overview","title":"Overview","text":"<p>Templates allow users to:</p> <ul> <li>Quick start with pre-configured environments</li> <li>Clone GitHub repositories automatically</li> <li>Pre-install extensions for specific workflows</li> <li>Organize templates into tabs/categories</li> </ul>"},{"location":"configuration/packaged-assets/#configuration-example","title":"Configuration Example","text":"<pre><code>packaged_assets:\n  tabs:\n  - name: \"Workshops\"\n    items:\n    - name: \"Databricks Workshop\"\n      description: \"Complete workshop environment\"\n      extensions_groups:\n        - \"python\"\n        - \"databricks\"\n      thumbnail_url: \"https://example.com/thumbnail.jpg\"\n      github_url: \"https://github.com/stikkireddy/chicago-vibe-coding.git\"\n      icon_links:\n        - lucide_icon: \"book\"\n          url: \"https://docs.databricks.com\"\n</code></pre> <p>See <code>app/devbox.yaml</code> for complete configuration examples.</p>"},{"location":"installation/","title":"Installation Overview","text":"<p>Databricks DevBox can be deployed in two main ways:</p> <ol> <li>As a Databricks Lakehouse App (Recommended for production)</li> <li>Local Development Setup (For testing and development)</li> </ol>"},{"location":"installation/#databricks-app","title":"Databricks App","text":"<p>Deploy Databricks DevBox as a serverless Lakehouse App within your Databricks workspace.</p> <p>Best for:</p> <ul> <li>Production deployments</li> <li>Team collaboration</li> <li>Training and workshops</li> <li>Enterprise environments</li> </ul> <p>View Databricks App Installation \u2192</p>"},{"location":"installation/#local-setup","title":"Local Setup","text":"<p>Run Databricks DevBox locally for development and testing.</p> <p>Best for:</p> <ul> <li>Development and testing</li> <li>Feature development</li> <li>Learning and experimentation</li> <li>Offline usage</li> </ul> <p>View Local Setup Guide \u2192</p>"},{"location":"installation/#system-requirements","title":"System Requirements","text":""},{"location":"installation/#for-databricks-app","title":"For Databricks App","text":"<ul> <li>Databricks Workspace (AWS, Azure, or GCP)</li> <li>Unity Catalog enabled (recommended)</li> <li>Databricks Runtime 13.3 LTS or higher</li> </ul>"},{"location":"installation/#for-local-development","title":"For Local Development","text":"<ul> <li>Python 3.11+</li> <li>Go 1.21+ (for building from source)</li> <li>Node.js 18+ (for web UI development)</li> <li>Docker (optional, for containerized deployment)</li> </ul>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>Choose your deployment method:</p> <ul> <li> <p>Deploy to Databricks \u2192</p> <p>Full production deployment guide</p> </li> <li> <p>Local Development \u2192</p> <p>Set up for local testing</p> </li> </ul>"},{"location":"installation/databricks-app/","title":"Deploy as Databricks App","text":"<p>This guide walks you through deploying Databricks DevBox as a Lakehouse App in your Databricks workspace.</p>"},{"location":"installation/databricks-app/#prerequisites","title":"Prerequisites","text":"<ul> <li>Databricks Workspace (AWS, Azure, or GCP)</li> <li>Unity Catalog enabled (recommended for token management)</li> <li>Workspace Admin permissions (or permission to create apps)</li> <li>Databricks Runtime 13.3 LTS or higher</li> </ul>"},{"location":"installation/databricks-app/#step-1-copy-app-folder-to-workspace","title":"Step 1: Copy App Folder to Workspace","text":""},{"location":"installation/databricks-app/#option-a-using-databricks-cli","title":"Option A: Using Databricks CLI","text":"<pre><code># Install Databricks CLI if needed\npip install databricks-cli\n\n# Configure authentication\ndatabricks configure --token\n\n# Upload the app folder to your workspace\ndatabricks workspace import_dir \\\n  ./app \\\n  /Workspace/Users/&lt;your-email&gt;/databricks-devbox-app \\\n  --overwrite\n</code></pre>"},{"location":"installation/databricks-app/#option-b-using-databricks-ui","title":"Option B: Using Databricks UI","text":"<ol> <li>Navigate to your Databricks workspace</li> <li>Click Workspace \u2192 Users \u2192  <li>Right-click \u2192 Create \u2192 Folder \u2192 Name it <code>databricks-devbox-app</code></li> <li>Click the Import button (or drag and drop) to upload the following files from the <code>app/</code> folder:</li> <li><code>app.py</code></li> <li><code>vibe_code.py</code></li> <li><code>version.py</code></li> <li><code>requirements.txt</code></li> <li><code>app.yaml</code></li> <li><code>devbox.yaml</code></li>"},{"location":"installation/databricks-app/#step-2-create-lakehouse-app","title":"Step 2: Create Lakehouse App","text":""},{"location":"installation/databricks-app/#using-databricks-ui","title":"Using Databricks UI","text":"<ol> <li>Navigate to Apps in the left sidebar</li> <li>Click Create App</li> <li>Fill in the app details:</li> </ol> <p>Basic Information:</p> <ul> <li>Name: <code>databricks-devbox</code></li> <li>Description: <code>Web-based development environments with code-server</code></li> </ul> <p>Source Code:</p> <ul> <li>Source Type: <code>Workspace</code></li> <li>Source Path: <code>/Workspace/Users/&lt;your-email&gt;/databricks-devbox-app</code></li> <li>Entry Point: <code>app.py</code></li> </ul> <p>Configuration:</p> <ul> <li>Python Version: <code>3.11</code></li> <li> <p>Command: <code>['python', 'app.py']</code> (from <code>app.yaml</code>)</p> </li> <li> <p>Click Create</p> </li> </ul>"},{"location":"installation/databricks-app/#using-databricks-cli-advanced","title":"Using Databricks CLI (Advanced)","text":"<pre><code># Create app using Databricks CLI\ndatabricks apps create \\\n  --source-path /Workspace/Users/&lt;your-email&gt;/databricks-devbox-app \\\n  --name databricks-devbox \\\n  --description \"Web-based development environments\"\n</code></pre>"},{"location":"installation/databricks-app/#step-3-configure-environment-variables-optional","title":"Step 3: Configure Environment Variables (Optional)","text":"<p>You can customize the behavior by setting environment variables in <code>app.yaml</code>:</p> <pre><code>command: ['python', 'app.py']\nenv:\n  - name: 'HOME'\n    value: '/app/python/source_code'\n  - name: 'SHELL'\n    value: '/usr/bin/bash'\n  - name: 'DATABRICKS_APP_DEPLOYMENT'\n    value: 'true'\n  - name: 'UV_PYTHON'\n    value: '/usr/bin/python3.11'\n</code></pre>"},{"location":"installation/databricks-app/#step-4-launch-the-app","title":"Step 4: Launch the App","text":"<ol> <li>Navigate to Apps in your Databricks workspace</li> <li>Find databricks-devbox in the list</li> <li>Click Start or Launch</li> <li>Wait for the app to initialize (first launch takes 2-3 minutes)</li> </ol>"},{"location":"installation/databricks-app/#what-happens-on-first-launch","title":"What Happens on First Launch?","text":"<p>The app automatically:</p> <ol> <li>\u2705 Downloads the platform-specific Go binary from GitHub releases</li> <li>\u2705 Installs code-server (version specified in <code>CODE_SERVER_VERSION</code>)</li> <li>\u2705 Installs Databricks CLI</li> <li>\u2705 Sets up vibe coding tools (Claude Code, CCR, Codex, Gemini)</li> <li>\u2705 Generates Databricks authentication token</li> <li>\u2705 Starts the DevBox manager server</li> </ol>"},{"location":"installation/databricks-app/#step-5-access-the-app","title":"Step 5: Access the App","text":"<p>Once launched, you'll see the app URL:</p> <pre><code>https://&lt;workspace-url&gt;/apps/&lt;app-id&gt;/\n</code></pre> <p>Click the URL to access the Databricks DevBox web interface.</p>"},{"location":"installation/databricks-app/#understanding-the-deployment","title":"Understanding the Deployment","text":""},{"location":"installation/databricks-app/#file-structure-in-workspace","title":"File Structure in Workspace","text":"<pre><code>/Workspace/Users/&lt;your-email&gt;/databricks-devbox-app/\n\u251c\u2500\u2500 app.py              # Main Python entry point\n\u251c\u2500\u2500 app.yaml            # Databricks App configuration\n\u251c\u2500\u2500 devbox.yaml         # DevBox configuration (extensions, templates)\n\u251c\u2500\u2500 vibe_code.py        # Vibe coding tools setup\n\u251c\u2500\u2500 version.py          # Version management\n\u2514\u2500\u2500 requirements.txt    # Python dependencies\n</code></pre>"},{"location":"installation/databricks-app/#binary-downloads","title":"Binary Downloads","text":"<p>The app downloads binaries to:</p> <pre><code>/app/python/source_code/\n\u251c\u2500\u2500 build/\n\u2502   \u2514\u2500\u2500 databricks-devbox-&lt;os&gt;-&lt;arch&gt;  # Go server binary\n\u251c\u2500\u2500 .local/\n\u2502   \u251c\u2500\u2500 lib/\n\u2502   \u2502   \u2514\u2500\u2500 code-server-v4.104.1/      # code-server\n\u2502   \u2514\u2500\u2500 bin/\n\u2502       \u251c\u2500\u2500 code-server -&gt; ../lib/code-server-v4.104.1/bin/code-server\n\u2502       \u2514\u2500\u2500 databricks                  # Databricks CLI\n\u2514\u2500\u2500 .npm-global/\n    \u2514\u2500\u2500 bin/\n        \u251c\u2500\u2500 claude-code                 # Claude Code CLI\n        \u251c\u2500\u2500 ccr                         # Claude Code Router\n        \u251c\u2500\u2500 codex                       # OpenAI Codex CLI\n        \u2514\u2500\u2500 gemini                      # Google Gemini CLI\n</code></pre>"},{"location":"installation/databricks-app/#data-persistence","title":"Data Persistence","text":"<p>Server data is stored in:</p> <pre><code>/app/python/source_code/\n\u251c\u2500\u2500 data/\n\u2502   \u251c\u2500\u2500 servers.json                    # Server configurations\n\u2502   \u2514\u2500\u2500 &lt;server-id&gt;/                    # Per-server data\n\u2502       \u2514\u2500\u2500 code-server/                # code-server configs\n\u251c\u2500\u2500 logs/\n\u2502   \u2514\u2500\u2500 &lt;server-id&gt;/                    # Per-server logs\n\u2514\u2500\u2500 workspace/\n    \u2514\u2500\u2500 &lt;server-id&gt;/                    # Workspaces\n</code></pre>"},{"location":"installation/databricks-app/#configuration","title":"Configuration","text":""},{"location":"installation/databricks-app/#customize-extension-groups","title":"Customize Extension Groups","text":"<p>Edit <code>devbox.yaml</code> to add or modify extension groups:</p> <pre><code>extension_groups:\n  python:\n    name: \"Python\"\n    description: \"Python development tools\"\n    extensions:\n      - \"ms-python.python\"\n      - \"ms-pyright.pyright\"\n    user_settings:\n      \"python.languageServer\": \"None\"\n</code></pre> <p>Learn more about configuration \u2192</p>"},{"location":"installation/databricks-app/#add-workspace-templates","title":"Add Workspace Templates","text":"<p>Add templates in <code>devbox.yaml</code>:</p> <pre><code>packaged_assets:\n  tabs:\n  - name: \"My Templates\"\n    items:\n    - name: \"ML Project\"\n      description: \"Machine Learning starter\"\n      extensions_groups:\n        - \"python\"\n        - \"jupyter\"\n      github_url: \"https://github.com/org/ml-starter.git\"\n</code></pre> <p>Learn more about templates \u2192</p>"},{"location":"installation/databricks-app/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/databricks-app/#app-fails-to-start","title":"App Fails to Start","text":"<p>Check logs:</p> <pre><code># Using Databricks CLI\ndatabricks apps logs &lt;app-id&gt;\n</code></pre> <p>Common issues:</p> <ul> <li>\u274c Binary download failed \u2192 Check internet connectivity from workspace</li> <li>\u274c Permission denied \u2192 Ensure Unity Catalog is enabled for token generation</li> <li>\u274c Python version mismatch \u2192 Verify <code>UV_PYTHON</code> environment variable</li> </ul>"},{"location":"installation/databricks-app/#code-server-not-installing","title":"Code-Server Not Installing","text":"<p>Solution: Manually set <code>CODE_SERVER_VERSION</code>:</p> <pre><code>env:\n  - name: 'CODE_SERVER_VERSION'\n    value: '4.104.1'\n</code></pre>"},{"location":"installation/databricks-app/#vibe-coding-tools-not-working","title":"Vibe Coding Tools Not Working","text":"<p>Check:</p> <ol> <li>Token generation is working (requires Unity Catalog)</li> <li>CCR is started: <code>source ~/.bashrc &amp;&amp; ccr status</code></li> <li>Configuration files exist in <code>.claude-code-router/</code></li> </ol> <p>See token troubleshooting \u2192</p>"},{"location":"installation/databricks-app/#updating-the-app","title":"Updating the App","text":""},{"location":"installation/databricks-app/#update-to-latest-version","title":"Update to Latest Version","text":"<ol> <li>Stop the app in Databricks UI</li> <li>Replace files in workspace with new versions</li> <li>Update <code>LHA_SERVER_VERSION</code> in <code>app.yaml</code> if needed</li> <li>Restart the app</li> </ol>"},{"location":"installation/databricks-app/#update-vibe-coding-tools","title":"Update Vibe Coding Tools","text":"<pre><code># SSH into workspace or use notebook\nnpm install -g @anthropic-ai/claude-code@latest\nnpm install -g @musistudio/claude-code-router@latest\n</code></pre>"},{"location":"installation/databricks-app/#security-considerations","title":"Security Considerations","text":""},{"location":"installation/databricks-app/#token-management","title":"Token Management","text":"<ul> <li>Tokens are auto-generated with configurable expiry</li> </ul>"},{"location":"installation/databricks-app/#workspace-isolation","title":"Workspace Isolation","text":"<ul> <li>Each code-server instance runs in isolated workspace</li> <li>No cross-instance file access</li> <li>Separate configuration per instance</li> </ul>"},{"location":"installation/databricks-app/#network-security","title":"Network Security","text":"<ul> <li>All traffic routed through Databricks App proxy</li> <li>Authentication handled by Databricks SSO</li> <li>No direct internet access from code-server instances</li> </ul>"},{"location":"installation/databricks-app/#next-steps","title":"Next Steps","text":"<ul> <li> <p>Architecture Overview \u2192</p> <p>Understand how DevBox works</p> </li> <li> <p>Configuration Guide \u2192</p> <p>Customize your deployment</p> </li> <li> <p>Setup Coding Assistants \u2192</p> <p>Configure AI tools</p> </li> </ul>"},{"location":"installation/local-setup/","title":"Local Development Setup","text":"<p>Run Databricks DevBox locally for development and testing.</p>"},{"location":"installation/local-setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+</li> <li>Go 1.21+ (if building from source)</li> <li>Node.js 18+ and pnpm (for web UI development)</li> <li>uv package manager</li> </ul>"},{"location":"installation/local-setup/#quick-start","title":"Quick Start","text":""},{"location":"installation/local-setup/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/stikkireddy/databricks-devbox.git\ncd databricks-devbox\n</code></pre>"},{"location":"installation/local-setup/#2-install-python-dependencies","title":"2. Install Python Dependencies","text":"<pre><code># Install uv if not already installed\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Install dependencies\nuv sync\n</code></pre>"},{"location":"installation/local-setup/#3-build-or-download-go-binary","title":"3. Build or Download Go Binary","text":""},{"location":"installation/local-setup/#option-a-download-pre-built-binary","title":"Option A: Download Pre-built Binary","text":"<pre><code>make download-binary\n</code></pre>"},{"location":"installation/local-setup/#option-b-build-from-source","title":"Option B: Build from Source","text":"<pre><code># Requires Go 1.21+\nmake build-go\n</code></pre>"},{"location":"installation/local-setup/#4-run-the-server","title":"4. Run the Server","text":"<pre><code># Run complete application\nmake run\n\n# Or run Go server directly\n./build/databricks-devbox-&lt;os&gt;-&lt;arch&gt;\n</code></pre> <p>The server will start on <code>http://localhost:8000</code></p>"},{"location":"installation/local-setup/#development-mode","title":"Development Mode","text":"<p>For active development with hot-reload:</p>"},{"location":"installation/local-setup/#backend-development","title":"Backend Development","text":"<pre><code># Terminal 1: Run Go server with auto-restart\ngo run databricks_devbox_go/*.go\n</code></pre>"},{"location":"installation/local-setup/#frontend-development","title":"Frontend Development","text":"<pre><code># Terminal 2: Run web UI dev server\ncd web_ui\npnpm install\npnpm dev\n</code></pre> <p>Web UI runs on <code>http://localhost:5173</code> with hot module replacement.</p>"},{"location":"installation/local-setup/#configuration","title":"Configuration","text":""},{"location":"installation/local-setup/#local-devboxyaml","title":"Local devbox.yaml","text":"<p>Create or modify <code>app/devbox.yaml</code> for local testing:</p> <pre><code>extension_groups:\n  python:\n    name: \"Python\"\n    extensions:\n      - \"ms-python.python\"\n\nserver:\n  default_port: 8000\n  code_server_port_range:\n    start: 8010\n    end: 8100\n\nui:\n  default_extension_groups:\n    - \"python\"\n</code></pre>"},{"location":"installation/local-setup/#environment-variables","title":"Environment Variables","text":"<p>Set these in your shell or <code>.env</code> file:</p> <pre><code># Server port (default: 8005, overridden by DEVBOX_SERVER_PORT)\nexport DEVBOX_SERVER_PORT=8000\n\n# Config file path\nexport DEVBOX_CONFIG_PATH=./app/devbox.yaml\n\n# Code-server version\nexport CODE_SERVER_VERSION=4.104.1\n\n# Binary version (for downloads)\nexport LHA_SERVER_VERSION=0.1.0\n</code></pre>"},{"location":"installation/local-setup/#build-options","title":"Build Options","text":""},{"location":"installation/local-setup/#build-go-server","title":"Build Go Server","text":"<pre><code># Build for current platform\nmake build-go\n\n# Build for all platforms\nmake build-all\n\n# Output: build/databricks-devbox-&lt;os&gt;-&lt;arch&gt;\n</code></pre>"},{"location":"installation/local-setup/#build-web-ui","title":"Build Web UI","text":"<pre><code># Build production web UI\nmake build-ui\n\n# Output: web_ui/dist/\n</code></pre>"},{"location":"installation/local-setup/#build-everything","title":"Build Everything","text":"<pre><code># Build Go server + Web UI\nmake build\n</code></pre>"},{"location":"installation/local-setup/#testing","title":"Testing","text":""},{"location":"installation/local-setup/#run-tests","title":"Run Tests","text":"<pre><code># Go tests\ncd databricks_devbox_go\ngo test ./...\n\n# Frontend tests (if available)\ncd web_ui\npnpm test\n</code></pre>"},{"location":"installation/local-setup/#docker-development-optional","title":"Docker Development (Optional)","text":""},{"location":"installation/local-setup/#using-docker-compose","title":"Using Docker Compose","text":"<pre><code># docker-compose.yml\nversion: '3.8'\nservices:\n  devbox:\n    build: .\n    ports:\n      - \"8000:8000\"\n      - \"8010-8100:8010-8100\"\n    volumes:\n      - ./data:/app/data\n      - ./workspace:/app/workspace\n    environment:\n      - DEVBOX_CONFIG_PATH=/app/devbox.yaml\n</code></pre> <p>Run:</p> <pre><code>docker-compose up\n</code></pre>"},{"location":"installation/local-setup/#directory-structure","title":"Directory Structure","text":"<pre><code>databricks-devbox/\n\u251c\u2500\u2500 app/                          # Databricks App files\n\u2502   \u251c\u2500\u2500 app.py                   # Python entry point\n\u2502   \u251c\u2500\u2500 vibe_code.py             # Vibe coding tools\n\u2502   \u2514\u2500\u2500 devbox.yaml              # Configuration\n\u251c\u2500\u2500 databricks_devbox_go/        # Go server source\n\u2502   \u251c\u2500\u2500 main.go\n\u2502   \u251c\u2500\u2500 process_manager.go\n\u2502   \u251c\u2500\u2500 routes.go\n\u2502   \u251c\u2500\u2500 config.go\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 web_ui/                      # React frontend\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 public/\n\u2502   \u2514\u2500\u2500 package.json\n\u251c\u2500\u2500 build/                       # Compiled binaries\n\u251c\u2500\u2500 data/                        # Runtime data\n\u2502   \u251c\u2500\u2500 servers.json\n\u2502   \u2514\u2500\u2500 &lt;server-id&gt;/\n\u251c\u2500\u2500 workspace/                   # Code-server workspaces\n\u251c\u2500\u2500 logs/                        # Server logs\n\u2514\u2500\u2500 Makefile\n</code></pre>"},{"location":"installation/local-setup/#makefile-commands","title":"Makefile Commands","text":"<pre><code># Installation\nmake install          # Install Python deps with uv\n\n# Building\nmake build-go        # Build Go server\nmake build-ui        # Build web UI\nmake build-all       # Build for all platforms\n\n# Running\nmake run             # Run the application\n\n# Cleaning\nmake clean           # Remove build artifacts\nmake clean-all       # Remove all generated files\n\n# Help\nmake help            # Show all commands\n</code></pre>"},{"location":"installation/local-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/local-setup/#port-already-in-use","title":"Port Already in Use","text":"<pre><code># Find process using port 8000\nlsof -i :8000\n\n# Kill process\nkill -9 &lt;PID&gt;\n</code></pre>"},{"location":"installation/local-setup/#go-binary-not-found","title":"Go Binary Not Found","text":"<pre><code># Build manually\ncd databricks_devbox_go\ngo build -o ../build/databricks-devbox\n\n# Or download\ncurl -L https://github.com/stikkireddy/databricks-devbox/releases/latest/download/databricks-devbox-&lt;os&gt;-&lt;arch&gt; -o build/databricks-devbox\nchmod +x build/databricks-devbox\n</code></pre>"},{"location":"installation/local-setup/#code-server-not-installing","title":"Code-Server Not Installing","text":"<p>Manually install code-server:</p> <pre><code># macOS/Linux\ncurl -fsSL https://code-server.dev/install.sh | sh\n\n# Or using npm\nnpm install -g code-server\n</code></pre>"},{"location":"installation/local-setup/#vibe-coding-tools-optional-for-local","title":"Vibe Coding Tools (Optional for Local)","text":"<p>Local setup doesn't require vibe coding tools, but you can install them:</p> <pre><code>npm install -g @anthropic-ai/claude-code\nnpm install -g @musistudio/claude-code-router\nnpm install -g @openai/codex\nnpm install -g @google/gemini-cli\n</code></pre>"},{"location":"installation/local-setup/#ide-setup","title":"IDE Setup","text":""},{"location":"installation/local-setup/#vs-code","title":"VS Code","text":"<p>Recommended extensions:</p> <pre><code>{\n  \"recommendations\": [\n    \"golang.go\",\n    \"bradlc.vscode-tailwindcss\",\n    \"esbenp.prettier-vscode\"\n  ]\n}\n</code></pre>"},{"location":"installation/local-setup/#goland-intellij","title":"GoLand / IntelliJ","text":"<ol> <li>Open <code>databricks_devbox_go</code> as Go module</li> <li>Set Go SDK to 1.21+</li> <li>Enable Go modules</li> </ol>"},{"location":"installation/local-setup/#next-steps","title":"Next Steps","text":"<ul> <li> <p>Architecture Overview \u2192</p> <p>Understand the codebase</p> </li> <li> <p>Configuration \u2192</p> <p>Customize settings</p> </li> <li> <p>API Reference \u2192</p> <p>REST API documentation</p> </li> </ul>"}]}